<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CPU缓存与MESI协议</title>
    <url>/posts/1a5fbe08.html</url>
    <content><![CDATA[<h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2>
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>
<img src="/posts/1a5fbe08/cpu%E7%BB%93%E6%9E%84%E5%9B%BE.svg" class="" title="cpu结构图">
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>cpu</tag>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次排查因线程WAITING导致应用假死的经历</title>
    <url>/posts/7e818be6.html</url>
    <content><![CDATA[<h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3>
<p>在一个阳光明媚的下午，我正在悠哉游哉的在工位上畅游网络世界(摸鱼 😃 )，忽然心里有点不好的预感，果然哈，企业微信里产品经理弹了一条消息给我说测试服务器的系统登录进去获取不到菜单，我随即连接到测试服务器，心想这种问题重新运行下应该就没事了，到系统管理后台目录重新跑下 <a href="http://start.sh">start.sh</a> 脚本，想不到，竟然也被这问题折腾了一个小时，因此记录一下排查过程</p>
<h3 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h3>
<ol>
<li>当重新运行了start.sh脚本后，系统正常运行成功，但是过一会就立马又是卡死状态，我打开浏览器登录进入系统，f12打开控制台看到获取菜单的请求一直在加载中，没有拿到响应，使用 tail 命令查看日志信息，请求日志和响应的日志信息也都能够正常输出</li>
<li>心想这是什么玩意，响应也返回了为什么会卡死呢，猜测是不是网关出了问题，随即又去排查网关的日志，发现只输出了请求的日志，没有输出响应的日志，难道是网关的问题吗，随即remote debug网关服务(测试服务器在本地机房，为了方便调试开启了remote debug)，将断点打在了 <code>NettyRoutingFilter#filter</code> 方法中(NettyRoutingFilter是最终的发送请求的过滤器)，然后让客户端的请求发送过来，发现只有请求发送过去，迟迟接受不到系统服务的响应(没有配置responseTimeout配置，会一直等待服务的响应)，因此知道问题点肯定发生在系统服务侧了</li>
<li>排查是不是系统服务所在服务器的硬盘空间或者内存不足了导致的，
<ul>
<li>使用 <code>df -h</code> 命令查看还有100多G的空间，不是磁盘空间不足引发的</li>
<li>使用<code>free -m -h</code>获取空闲内存也还要10多G，</li>
<li>使用<code>jstat -gc 进程id 2000 5 </code> 查看java进程内存使用情况，也都是正常的</li>
</ul>
</li>
<li>看到都是正常的，顿时就毫无头绪了，只能疯狂摸头以示不解，突然脑海里闪现了一点思路，既然请求无响应，是不是线程被阻塞住了，随即 <code>jastck 进程id</code> 命令打印下服务的线程信息，查看下请求线程的状态堆栈，随即就发现了问题根源所在</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">只给出请求线程的状态以及堆栈信息
<span class="token string">"http-nio-6002-exec-2"</span> #<span class="token number">151</span> daemon prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x000070fb4d7c8000</span> nid<span class="token operator">=</span><span class="token number">0x3c3178</span> waiting <span class="token keyword">for</span> monitor entry <span class="token punctuation">[</span><span class="token number">0x000070fce07fb000</span><span class="token punctuation">]</span>

<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread<span class="token punctuation">.</span>State</span><span class="token operator">:</span> <span class="token constant">BLOCKED</span> <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>SocketFrameHandler</span><span class="token punctuation">.</span><span class="token function">writeFrame</span><span class="token punctuation">(</span><span class="token class-name">SocketFrameHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">170</span><span class="token punctuation">)</span>

<span class="token operator">-</span> waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> <span class="token generics"><span class="token punctuation">&lt;</span>0x00000000eac318c0<span class="token punctuation">></span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataOutputStream</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQConnection</span><span class="token punctuation">.</span><span class="token function">writeFrame</span><span class="token punctuation">(</span><span class="token class-name">AMQConnection</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">562</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQCommand</span><span class="token punctuation">.</span><span class="token function">transmit</span><span class="token punctuation">(</span><span class="token class-name">AMQCommand</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">130</span><span class="token punctuation">)</span>

<span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x00000000fa3a3cb0<span class="token punctuation">></span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>CommandAssembler</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQChannel</span><span class="token punctuation">.</span><span class="token function">quiescingTransmit</span><span class="token punctuation">(</span><span class="token class-name">AMQChannel</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">447</span><span class="token punctuation">)</span>

<span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x00000000fa3a38d8<span class="token punctuation">></span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQChannel</span><span class="token punctuation">.</span><span class="token function">quiescingTransmit</span><span class="token punctuation">(</span><span class="token class-name">AMQChannel</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">429</span><span class="token punctuation">)</span>

<span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x00000000fa3a38d8<span class="token punctuation">></span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQChannel</span><span class="token punctuation">.</span><span class="token function">quiescingRpc</span><span class="token punctuation">(</span><span class="token class-name">AMQChannel</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">346</span><span class="token punctuation">)</span>

<span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x00000000fa3a38d8<span class="token punctuation">></span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQChannel</span><span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token class-name">AMQChannel</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">337</span><span class="token punctuation">)</span>

<span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x00000000fa3a38d8<span class="token punctuation">></span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQChannel</span><span class="token punctuation">.</span><span class="token function">privateRpc</span><span class="token punctuation">(</span><span class="token class-name">AMQChannel</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">277</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQChannel</span><span class="token punctuation">.</span><span class="token function">exnWrappingRpc</span><span class="token punctuation">(</span><span class="token class-name">AMQChannel</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">138</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>ChannelN</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">ChannelN</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">133</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>ChannelManager</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token class-name">ChannelManager</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">176</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>AMQConnection</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token class-name">AMQConnection</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">553</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>SimpleConnection</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token class-name">SimpleConnection</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">57</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span>$<span class="token class-name">ChannelCachingConnectionProxy</span><span class="token punctuation">.</span><span class="token function">createBareChannel</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1365</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span>$<span class="token class-name">ChannelCachingConnectionProxy</span><span class="token punctuation">.</span>access$<span class="token function">200</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1351</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span><span class="token punctuation">.</span><span class="token function">doCreateBareChannel</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">672</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span><span class="token punctuation">.</span><span class="token function">createBareChannel</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">655</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span><span class="token punctuation">.</span><span class="token function">getCachedChannelProxy</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">625</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">516</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span><span class="token punctuation">.</span>access$<span class="token function">1700</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">102</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span>CachingConnectionFactory</span>$<span class="token class-name">ChannelCachingConnectionProxy</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1370</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>RabbitTemplate</span><span class="token punctuation">.</span><span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2079</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>RabbitTemplate</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2047</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>RabbitTemplate</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">994</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>RabbitTemplate</span><span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1100</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>RabbitTemplate</span><span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1091</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>reports<span class="token punctuation">.</span></span>RabbitLoggerReport</span><span class="token punctuation">.</span><span class="token function">reportLog</span><span class="token punctuation">(</span><span class="token class-name">RabbitLoggerReport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>reports<span class="token punctuation">.</span></span>DefaultLoggerReportChain</span><span class="token punctuation">.</span><span class="token function">reportLog</span><span class="token punctuation">(</span><span class="token class-name">DefaultLoggerReportChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">71</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>reports<span class="token punctuation">.</span></span>DefaultLoggerReportChain</span><span class="token punctuation">.</span><span class="token function">reportLog</span><span class="token punctuation">(</span><span class="token class-name">DefaultLoggerReportChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">72</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>reports<span class="token punctuation">.</span></span>DefaultLoggerReportChain</span><span class="token punctuation">.</span><span class="token function">reportLog</span><span class="token punctuation">(</span><span class="token class-name">DefaultLoggerReportChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>advisor<span class="token punctuation">.</span></span>LogReportInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">LogReportInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>advisor<span class="token punctuation">.</span></span>LogReportInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">LogReportInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">46</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">DynamicAdvisedInterceptor</span><span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">688</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>SysFileController</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span>$$bc9efccd<span class="token punctuation">.</span><span class="token function">queryByRelevanceId</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>GeneratedMethodAccessor357</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>InvocableHandlerMethod</span><span class="token punctuation">.</span><span class="token function">doInvoke</span><span class="token punctuation">(</span><span class="token class-name">InvocableHandlerMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">190</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>InvocableHandlerMethod</span><span class="token punctuation">.</span><span class="token function">invokeForRequest</span><span class="token punctuation">(</span><span class="token class-name">InvocableHandlerMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">138</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>ServletInvocableHandlerMethod</span><span class="token punctuation">.</span><span class="token function">invokeAndHandle</span><span class="token punctuation">(</span><span class="token class-name">ServletInvocableHandlerMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">104</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RequestMappingHandlerAdapter</span><span class="token punctuation">.</span><span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">892</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RequestMappingHandlerAdapter</span><span class="token punctuation">.</span><span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">797</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span>AbstractHandlerMethodAdapter</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">AbstractHandlerMethodAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">87</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span><span class="token punctuation">.</span><span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1039</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span><span class="token punctuation">.</span><span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">942</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>FrameworkServlet</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1005</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>FrameworkServlet</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">897</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">634</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>FrameworkServlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">882</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">741</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">231</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span>WsFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">WsFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>WebStatFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">WebStatFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">124</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xss<span class="token punctuation">.</span></span>XssFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">XssFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>RequestContextFilter</span><span class="token punctuation">.</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">RequestContextFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>OncePerRequestFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">107</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>FormContentFilter</span><span class="token punctuation">.</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">FormContentFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>OncePerRequestFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">107</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>HiddenHttpMethodFilter</span><span class="token punctuation">.</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>OncePerRequestFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">107</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>CharacterEncodingFilter</span><span class="token punctuation">.</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>OncePerRequestFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">107</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardWrapperValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardWrapperValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardContextValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardContextValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span></span>AuthenticatorBase</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">AuthenticatorBase</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">490</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardHostValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardHostValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">139</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>valves<span class="token punctuation">.</span></span>ErrorReportValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">ErrorReportValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardEngineValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardEngineValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">74</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>CoyoteAdapter</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">CoyoteAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">343</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">.</span></span>Http11Processor</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Http11Processor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">408</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span>AbstractProcessorLight</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AbstractProcessorLight</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span>AbstractProtocol</span>$<span class="token class-name">ConnectionHandler</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AbstractProtocol</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">836</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>NioEndpoint</span>$<span class="token class-name">SocketProcessor</span><span class="token punctuation">.</span><span class="token function">doRun</span><span class="token punctuation">(</span><span class="token class-name">NioEndpoint</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1747</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketProcessorBase</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SocketProcessorBase</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">49</span><span class="token punctuation">)</span>

<span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x00000000f97c1de0<span class="token punctuation">></span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>NioEndpoint</span>$<span class="token class-name">NioSocketWrapper</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1149</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">624</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span></span>TaskThread</span>$<span class="token class-name">WrappingRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TaskThread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">)</span>

at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>可以看到我们的请求线程已经被BLOCKED了，线程堆栈表明是rabbitmq消息发送阻塞住了，因为我们的日志切面会将请求的日志信息发送到rabbitmq中，所以堆栈里出现了rabbitmq，这也解释了控制台可以正常输出，但是请求就是没有返回相应</li>
<li>随即连接rabbitmq的服务器，打印日志看下错误信息，发现磁盘不足导致消息根本无法写入，使用<code>df -h</code> 指令查看硬盘空间情况，发现只有几百k的空间了，因为这台服务器只运行了docker容器，猜测是docker的运行日志未清理导致空间占用的过大，然后编写了清理日志的脚本</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>title</span></div><code class="language-bash"><span class="token shebang important">#!/bin/sh </span>
  
<span class="token builtin class-name">echo</span> <span class="token string">"======== start clean docker containers logs ========"</span>  
  
<span class="token assign-left variable">logs</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /var/lib/docker/containers/ <span class="token parameter variable">-name</span> *-json.log<span class="token variable">)</span></span>  
  
<span class="token keyword">for</span> <span class="token for-or-select variable">log</span> <span class="token keyword">in</span> <span class="token variable">$logs</span>  
        <span class="token keyword">do</span>  
                <span class="token builtin class-name">echo</span> <span class="token string">"clean logs : <span class="token variable">$log</span>"</span>  
                <span class="token function">cat</span> /dev/null <span class="token operator">></span> <span class="token variable">$log</span>  
        <span class="token keyword">done</span>  

<span class="token builtin class-name">echo</span> <span class="token string">"======== end clean docker containers logs ========"</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再刷新浏览器请求果然立马成功了，长吁一口气，不过由于docker会一直运行，产生的日志大小会源源不断的增长，为了治本设置了docker的日志大小上限，以免再出现这种情况<br />
7. 修改<code>/etc/docker/daemon.json</code> 文件，将下面的内容复制进去再 <code>systemctl restart docker</code> 即可</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 增加下面的内容</span>
"log<span class="token punctuation">-</span>driver"<span class="token punctuation">:</span><span class="token string">"json-file"</span><span class="token punctuation">,</span>
<span class="token key atrule">"log-opts"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>"max<span class="token punctuation">-</span>size"<span class="token punctuation">:</span><span class="token string">"1g"</span><span class="token punctuation">,</span> "max<span class="token punctuation">-</span>file"<span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>工作log</category>
      </categories>
  </entry>
  <entry>
    <title>Hotspot源码剖析Java方法执行流程</title>
    <url>/posts/48bea92d.html</url>
    <content><![CDATA[<h4 id="1-背景"><a class="markdownIt-Anchor" href="#1-背景"></a> 1. 背景</h4>
<p>在学习JMM的过程中产生了对想探索栈帧内存分配的底层原理的想法，故此写下这篇博客以梳理和学习hotspot虚拟机是如何执行java方法并且分配栈帧空间的</p>
<blockquote>
<p>本篇博客是基于Hotspot的 CppInterpreter.cpp[^1] 所编写的，其他基于硬件架构而开发的汇编代码让人晦涩难懂，不过原理都一样的，所以无需纠结</p>
</blockquote>
<h4 id="2-相关概念"><a class="markdownIt-Anchor" href="#2-相关概念"></a> 2. 相关概念</h4>
<h5 id="特殊寄存器"><a class="markdownIt-Anchor" href="#特殊寄存器"></a> 特殊寄存器</h5>
<ul>
<li><code>sp(stack pointer)</code>: 栈顶指针，每个线程都会有私有的栈，而这个指针指向线程栈的顶部，压栈出栈都依靠此指针的移动</li>
<li><code>fp(frame pointer)</code>：栈帧指针，jvm会给每个调用的方法分配一个栈帧，用于存储方法的局部变量，参数和返回地址等，而这个指针指向栈帧的起始地址</li>
<li><code>bcp(byte code poiniter)</code>：字节码指针，存储当前执行的Java字节码指令的位置，每执行完当前指令，就会更新为下一条要执行的字节码指令的位置</li>
<li><code>pc(program counter pointer)</code>：程序计数器，用于存储下一条即将要执行的指令的内存地址
<ul>
<li>注意与上面的bcp是不同的作用，pc是cpu所使用的，而bcp是jvm所使用的，一条字节码指令对应着底层多条指令</li>
</ul>
</li>
</ul>
<h5 id="调用方法字节码指令"><a class="markdownIt-Anchor" href="#调用方法字节码指令"></a> 调用方法字节码指令</h5>
<p>在java中调用方法的代码根据不同的情况会被编译成为不同的字节码指令，有如下4种</p>
<ul>
<li><code>invokevirtual</code>: 虚方法，通过对象引用调用实例方法，虚方法只有在运行时根据对象的实际类型才能确定具体调用哪个类的方法</li>
<li><code>invokeinterface</code>：接口方法，通过接口引用调用接口方法</li>
<li><code>invokespecial</code>：特殊方法调用，三种情况：实例构造方法，私有方法，通过super关键字调用父类方法</li>
<li><code>invokestatic</code>：调用类的静态方法</li>
</ul>
<h3 id="3-源码剖析"><a class="markdownIt-Anchor" href="#3-源码剖析"></a> 3. 源码剖析</h3>
<blockquote>
<p>基于jdk8u cppInterpreter.cpp解析代码，不过鉴于由Gary Benson贡献的代码截至目前最新版<code>25</code>并未发生大的改变(不过命名从cpp前缀修改为zero了，所以若是查看最新版请注意替换)</p>
</blockquote>
<h4 id="方法入口"><a class="markdownIt-Anchor" href="#方法入口"></a> 方法入口</h4>
<p>hotspot会对执行的java方法进行分类<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，对于普通的方法通常对应着两种</p>
<ul>
<li><code>zerolocals</code>：表示方法需要进行局部变量初始化，以存储方法参数和方法内局部变量</li>
<li><code>zerolocals_synchronized</code>：和上面一样，只是方法上增加了synchronized修饰<br />
hotspot解释器会对这两种方法会生成一个<code>EntryPoint</code>(根据架构不同可能会生成不同的<code>EntryPoint</code>)，后续执行此类的方法直接从该<code>EntryPoint</code>进入执行 (其实就是策略模式)</li>
</ul>
<p>创建<code>EntryPoint</code>的调用链<br />
如果是Threads::create_vm -&gt; init_globals() -&gt; stubRoutines_init1() -&gt; StubRoutines::initialize2() -&gt; StubGenerator_generate(&amp;buffer, true) -&gt; generate_all() -&gt; generate_method_entry<br />
<code>stubGenerator_zero.cpp</code></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; 如果是其他的解释器,此方法会对各种类型的方法创建 EntryPoint，但当前是c++编写的解释器，所以直接用c++代码去执行java代码,没有为其生成 EntryPoint

#undef method_entry


  void generate_initial() &#123;
    &#x2F;&#x2F; Generates all stubs and initializes the entry points

    &#x2F;&#x2F; entry points that exist in all platforms Note: This is code
    &#x2F;&#x2F; that could be shared among different platforms - however the
    &#x2F;&#x2F; benefit seems to be smaller than the disadvantage of having a
    &#x2F;&#x2F; much more complicated generator structure. See also comment in
    &#x2F;&#x2F; stubRoutines.hpp.

    StubRoutines::_forward_exception_entry   &#x3D; ShouldNotCallThisStub();
    &#x2F;**
     * call_stub 函数地址
     *&#x2F;
    StubRoutines::_call_stub_entry           &#x3D; (address) call_stub;
    StubRoutines::_catch_exception_entry     &#x3D; ShouldNotCallThisStub();

    &#x2F;&#x2F; atomic calls
    StubRoutines::_atomic_xchg_entry         &#x3D; ShouldNotCallThisStub();
    StubRoutines::_atomic_xchg_ptr_entry     &#x3D; ShouldNotCallThisStub();
    StubRoutines::_atomic_cmpxchg_entry      &#x3D; ShouldNotCallThisStub();
    StubRoutines::_atomic_cmpxchg_ptr_entry  &#x3D; ShouldNotCallThisStub();
    StubRoutines::_atomic_cmpxchg_long_entry &#x3D; ShouldNotCallThisStub();
    StubRoutines::_atomic_add_entry          &#x3D; ShouldNotCallThisStub();
    StubRoutines::_atomic_add_ptr_entry      &#x3D; ShouldNotCallThisStub();
    StubRoutines::_fence_entry               &#x3D; ShouldNotCallThisStub();

    &#x2F;&#x2F; amd64 does this here, sparc does it in generate_all()
    StubRoutines::_handler_for_unsafe_access_entry &#x3D;
      ShouldNotCallThisStub();
  &#125;
   
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看下stubGenerator_template</p>
<p>在cppInter</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void CppInterpreterGenerator::generate_all() &#123;
  AbstractInterpreterGenerator::generate_all();

  &#123; CodeletMark cm(_masm, &quot;result handlers for native calls&quot;);
#define method_entry(kind) Interpreter::_entry_table[Interpreter::kind] &#x3D; generate_method_entry(Interpreter::kind)

  &#123; CodeletMark cm(_masm, &quot;(kind &#x3D; frame_manager)&quot;);
    &#x2F;&#x2F; all non-native method kinds
    method_entry(zerolocals);
    method_entry(zerolocals_synchronized);
    method_entry(empty);
    method_entry(accessor);
    method_entry(abstract);
    method_entry(java_lang_math_sin   );
    method_entry(java_lang_math_cos   );
    method_entry(java_lang_math_tan   );
    method_entry(java_lang_math_abs   );
    method_entry(java_lang_math_sqrt  );
    method_entry(java_lang_math_log   );
    method_entry(java_lang_math_log10 );
    method_entry(java_lang_math_pow );
    method_entry(java_lang_math_exp );
    method_entry(java_lang_ref_reference_get);

    initialize_method_handle_entries();

    Interpreter::_native_entry_begin &#x3D; Interpreter::code()-&gt;code_end();
    method_entry(native);
    method_entry(native_synchronized);
    Interpreter::_native_entry_end &#x3D; Interpreter::code()-&gt;code_end();
  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">
address AbstractInterpreterGenerator::generate_method_entry(
    AbstractInterpreter::MethodKind kind) &#123;
  address entry_point &#x3D; NULL;

  switch (kind) &#123;
  case Interpreter::zerolocals:
  case Interpreter::zerolocals_synchronized:
    break;
  &#x2F;&#x2F; ... 省略了其他分支条件的判断
  &#125;

  &#x2F;&#x2F; 由于是zerolocals或者zerolocals_synchronied
  if (entry_point &#x3D;&#x3D; NULL) 
    entry_point &#x3D; ((InterpreterGenerator*) this)-&gt;generate_normal_entry(false);

  return entry_point;
&#125;

address InterpreterGenerator::generate_normal_entry(bool synchronized) &#123;
  assert(synchronized &#x3D;&#x3D; false, &quot;should be&quot;);

  return generate_entry((address) CppInterpreter::normal_entry);
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="分析java方法执行流程"><a class="markdownIt-Anchor" href="#分析java方法执行流程"></a> 分析java方法执行流程</h4>
<ol>
<li>调用java方法入口<br />
<code>javaCalls.cpp#call_virtual</code></li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void JavaCalls::call_virtual(JavaValue* result, KlassHandle spec_klass, Symbol* name, Symbol* signature, JavaCallArguments* args, TRAPS) &#123;
  CallInfo callinfo;
  Handle receiver &#x3D; args-&gt;receiver();
  KlassHandle recvrKlass(THREAD, receiver.is_null() ? (Klass*)NULL : receiver-&gt;klass());
  LinkResolver::resolve_virtual_call(
          callinfo, receiver, recvrKlass, spec_klass, name, signature,
          KlassHandle(), false, true, CHECK);
  methodHandle method &#x3D; callinfo.selected_method();
  assert(method.not_null(), &quot;should have thrown exception&quot;);

  &#x2F;&#x2F; Invoke the method
  JavaCalls::call(result, method, args, CHECK);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int CppInterpreter::normal_entry(Method* method, intptr_t UNUSED, TRAPS) &#123;  
  JavaThread *thread &#x3D; (JavaThread *) THREAD;  
  &#x2F;&#x2F; Allocate and initialize our frame. 
  &#x2F;&#x2F; 为方法分配并初始化栈帧，其内部就会创建我们的局部变量表，以及设置bcp指针
  InterpreterFrame *frame &#x3D; InterpreterFrame::build(method, CHECK_0);
  &#x2F;&#x2F; 保存我们的栈帧到线程栈中  
  thread-&gt;push_zero_frame(frame);  
  &#x2F;&#x2F; Execute those bytecodes!  
  &#x2F;&#x2F; 进入执行字节码的主入口
  main_loop(0, THREAD);  
  
  &#x2F;&#x2F; No deoptimized frames on the stack  
  return 0;  
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>构建方法栈帧</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">InterpreterFrame *InterpreterFrame::build(Method* const method, TRAPS) &#123;
  JavaThread *thread &#x3D; (JavaThread *) THREAD;
  ZeroStack *stack &#x3D; thread-&gt;zero_stack();

  &#x2F;&#x2F; Calculate the size of the frame we&#39;ll build, including
  &#x2F;&#x2F; any adjustments to the caller&#39;s frame that we&#39;ll make.
  &#x2F;&#x2F; 方法内部局部变量数量
  int extra_locals  &#x3D; 0;
  &#x2F;&#x2F; 监视器占用空间大小
  int monitor_words &#x3D; 0;
  &#x2F;&#x2F; 局部变量表变量个数&#x2F;长度
  int stack_words   &#x3D; 0;
  &#x2F;&#x2F; 注意，上面的参数编译期就可以确定下来，可以通过javap -l .class 看到局部变量表信息
  &#x2F;&#x2F; 所以这里只是取出来然后分配一个大小合适的局部变量表来存储方法中所操作的变量
  if (!method-&gt;is_native()) &#123;
	&#x2F;&#x2F; 局部变量表长度 - 方法参数 得到 方法内部定义的局部变量个数
    extra_locals &#x3D; method-&gt;max_locals() - method-&gt;size_of_parameters();
    &#x2F;&#x2F; 局部变量表solt个数
    stack_words  &#x3D; method-&gt;max_stack();
  &#125;
  if (method-&gt;is_synchronized()) &#123;
	&#x2F;&#x2F; 方法是同步的，那么需要分配一个solt存储
    monitor_words &#x3D; frame::interpreter_frame_monitor_size();
  &#125;
	&#x2F;&#x2F; 检查是否栈溢出
  stack-&gt;overflow_check(
    extra_locals + header_words + monitor_words + stack_words, CHECK_NULL);

  &#x2F;&#x2F; Adjust the caller&#39;s stack frame to accomodate any additional
  &#x2F;&#x2F; local variables we have contiguously with our parameters.
  &#x2F;&#x2F; 预先填充
  for (int i &#x3D; 0; i &lt; extra_locals; i++)
    stack-&gt;push(0);
    &#x2F;&#x2F; 分配局部变量表空间了
  intptr_t *locals;
  if (method-&gt;is_native())
	  &#x2F;&#x2F; 入股是native方法
    locals &#x3D; stack-&gt;sp() + (method-&gt;size_of_parameters() - 1);
  else
    locals &#x3D; stack-&gt;sp() + (method-&gt;max_locals() - 1);

  stack-&gt;push(0); &#x2F;&#x2F; next_frame, filled in later
  intptr_t *fp &#x3D; stack-&gt;sp();
  assert(fp - stack-&gt;sp() &#x3D;&#x3D; next_frame_off, &quot;should be&quot;);

  stack-&gt;push(INTERPRETER_FRAME);
  assert(fp - stack-&gt;sp() &#x3D;&#x3D; frame_type_off, &quot;should be&quot;);

  interpreterState istate &#x3D;
    (interpreterState) stack-&gt;alloc(sizeof(BytecodeInterpreter));
  assert(fp - stack-&gt;sp() &#x3D;&#x3D; istate_off, &quot;should be&quot;);

  istate-&gt;set_locals(locals);
  istate-&gt;set_method(method);
  istate-&gt;set_self_link(istate);
  istate-&gt;set_prev_link(NULL);
  istate-&gt;set_thread(thread);
  istate-&gt;set_bcp(method-&gt;is_native() ? NULL : method-&gt;code_base());
  istate-&gt;set_constants(method-&gt;constants()-&gt;cache());
  istate-&gt;set_msg(BytecodeInterpreter::method_entry);
  istate-&gt;set_oop_temp(NULL);
  istate-&gt;set_mdx(NULL);
  istate-&gt;set_callee(NULL);

  istate-&gt;set_monitor_base((BasicObjectLock *) stack-&gt;sp());
  if (method-&gt;is_synchronized()) &#123;
    BasicObjectLock *monitor &#x3D;
      (BasicObjectLock *) stack-&gt;alloc(monitor_words * wordSize);
    oop object;
    if (method-&gt;is_static())
      object &#x3D; method-&gt;constants()-&gt;pool_holder()-&gt;java_mirror();
    else
      object &#x3D; (oop) (void*)locals[0];
    monitor-&gt;set_obj(object);
  &#125;

  istate-&gt;set_stack_base(stack-&gt;sp());
  istate-&gt;set_stack(stack-&gt;sp() - 1);
  if (stack_words)
    stack-&gt;alloc(stack_words * wordSize);
  istate-&gt;set_stack_limit(stack-&gt;sp() - 1);

  return (InterpreterFrame *) fp;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>主入口</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">

<span class="token keyword">void</span> CppInterpreter<span class="token operator">::</span><span class="token function">main_loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> recurse<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  # 当前java线程
  JavaThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span> THREAD<span class="token punctuation">;</span>
  <span class="token comment">// 线程栈</span>
  ZeroStack <span class="token operator">*</span>stack <span class="token operator">=</span> thread<span class="token operator">-></span><span class="token function">zero_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// If we are entering from a deopt we may need to call</span>
  <span class="token comment">// ourself a few times in order to get to our frame.</span>
  <span class="token comment">// 递归调用，不太理解</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>recurse<span class="token punctuation">)</span>
    <span class="token function">main_loop</span><span class="token punctuation">(</span>recurse <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 转换为解释器栈帧类型</span>
  InterpreterFrame <span class="token operator">*</span>frame <span class="token operator">=</span> thread<span class="token operator">-></span><span class="token function">top_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">as_interpreter_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 解释器状态[该状态信息包含了执行方法所需要的一切信息，包括不仅限于当前线程，栈，栈帧，本地变量表，pc,sp 地址]</span>
  interpreterState istate <span class="token operator">=</span> frame<span class="token operator">-></span><span class="token function">interpreter_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Method<span class="token operator">*</span> method <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">intptr_t</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> result_slots <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 循环里是因为有执行的指令条件不满足，从而进入对应的分支再执行指令</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// We can set up the frame anchor with everything we want at</span>
    <span class="token comment">// this point as we are thread_in_Java and no safepoints can</span>
    <span class="token comment">// occur until we go to vm mode.  We do have to clear flags</span>
    <span class="token comment">// on return from vm but that is it.</span>
    <span class="token comment">// 设置java线程的sp以及fp寄存器，并且让java pc地址清空</span>
    <span class="token comment">// src\cpu\zero\vm\javaFrameAnchor_zero.hpp#set(intptr_t* sp, address pc, ZeroFrame* fp)</span>
    thread<span class="token operator">-></span><span class="token function">set_last_Java_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Call the interpreter</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>JvmtiExport<span class="token operator">::</span><span class="token function">can_post_interpreter_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      BytecodeInterpreter<span class="token operator">::</span><span class="token function">runWithChecks</span><span class="token punctuation">(</span>istate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token comment">// 这里就是执行字节码指令的关键之处，会</span>
      BytecodeInterpreter<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span>istate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fixup_after_potential_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Clear the frame anchor</span>
    thread<span class="token operator">-></span><span class="token function">reset_last_Java_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Examine the message from the interpreter to decide what to do</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>call_method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      Method<span class="token operator">*</span> callee <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">callee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Trim back the stack to put the parameters at the top</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Make the call</span>
      Interpreter<span class="token operator">::</span><span class="token function">invoke_method</span><span class="token punctuation">(</span>callee<span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">callee_entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fixup_after_potential_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Convert the result</span>
      istate<span class="token operator">-></span><span class="token function">set_stack</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Restore the stack</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Resume the interpreter</span>
      istate<span class="token operator">-></span><span class="token function">set_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>method_resume<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>more_monitors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> monitor_words <span class="token operator">=</span> frame<span class="token operator">::</span><span class="token function">interpreter_frame_monitor_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Allocate the space</span>
      stack<span class="token operator">-></span><span class="token function">overflow_check</span><span class="token punctuation">(</span>monitor_words<span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>HAS_PENDING_EXCEPTION<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      stack<span class="token operator">-></span><span class="token function">alloc</span><span class="token punctuation">(</span>monitor_words <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Move the expression stack contents</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span> <span class="token operator">*</span>p <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>

      <span class="token comment">// Move the expression stack pointers</span>
      istate<span class="token operator">-></span><span class="token function">set_stack_limit</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>
      istate<span class="token operator">-></span><span class="token function">set_stack</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>
      istate<span class="token operator">-></span><span class="token function">set_stack_base</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Zero the new monitor so the interpreter can find it.</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span>BasicObjectLock <span class="token operator">*</span><span class="token punctuation">)</span> istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">set_obj</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Resume the interpreter</span>
      istate<span class="token operator">-></span><span class="token function">set_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>got_monitors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>return_from_method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Copy the result into the caller's frame</span>
      result_slots <span class="token operator">=</span> type2size<span class="token punctuation">[</span>method<span class="token operator">-></span><span class="token function">result_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>result_slots <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> result_slots <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"what?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result_slots<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>throwing_exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>HAS_PENDING_EXCEPTION<span class="token punctuation">,</span> <span class="token string">"should do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>do_osr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Unwind the current frame</span>
      thread<span class="token operator">-></span><span class="token function">pop_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Remove any extension of the previous frame</span>
      <span class="token keyword">int</span> extra_locals <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> method<span class="token operator">-></span><span class="token function">size_of_parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra_locals<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Jump into the OSR method</span>
      Interpreter<span class="token operator">::</span><span class="token function">invoke_osr</span><span class="token punctuation">(</span>
        method<span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">osr_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">osr_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">ShouldNotReachHere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Unwind the current frame</span>
  thread<span class="token operator">-></span><span class="token function">pop_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Pop our local variables</span>
  stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Push our result</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Adjust result to smaller</span>
    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">intptr_t</span> res<span class="token punctuation">;</span>
      jint res_jint<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result_slots <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      BasicType t <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">result_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_subword_type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res_jint <span class="token operator">=</span> <span class="token punctuation">(</span>jint<span class="token punctuation">)</span><span class="token function">narrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> res_jint<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    stack<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>具体分类类别可查看 <code>AbstractInterpreter.hpp$MethodKind</code>, 特别的是Math类，该类下的数学计算方法都会进行内联 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>hotspot</category>
      </categories>
  </entry>
  <entry>
    <title>JVM Atomic源码解析</title>
    <url>/posts/6961ed95.html</url>
    <content><![CDATA[<h1 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h1>
<p>在日常工作的过程中，常常会使用到一些<code>共享变量</code>来监控某些指标，比如<code>IM系统</code>中为了保证服务端转发消息给客户端时的消息服务质量，我借鉴了<code>TCP</code>的超时重传机制，当通过<code>channel</code>将消息推送给客户端后，达到一定的时间，服务端还没有收到客户端对该消息的<code>ack</code>消息，那么就认为该消息丢失，会触发重传，为了能够掌握某个节点的消息质量情况和超时重传队列的长度，我对重传的次数以及队列的长度都使用了<code>Metrics</code>进行监控，而为了确保在多线程环境下累加重传的次数的线程安全性，我采用了<code>AtomicLong</code>用来计算重传次数计数，<code>AtomicLong</code>称为原子变量，内部利用<code>CAS</code>指令自旋的方式来完成值的比较和更新，确保了操作的线程安全，但是其底层是如何保证的呢，保留疑问，跟随本文寻找答案</p>
<h1 id="atomiclong"><a class="markdownIt-Anchor" href="#atomiclong"></a> AtomicLong</h1>
<p>首先通过阅读Java层面的<code>AtomicLong</code>的源码，了解下它的自增实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicLong</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// setup to use Unsafe.compareAndSwapLong for updates</span>
    <span class="token comment">// Unsafe 提供了很多最底层的操作，此处主要是用到其内部定义的CAS相关的方法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>
    <span class="token comment">// 当前机器是否支持8字节的长整型的cas操作,如果不支持,为了确保原子性的读取和写入,会使用锁的方式来操作共享变量 value，比如32位机器就是false</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">VM_SUPPORTS_LONG_CAS</span> <span class="token operator">=</span> <span class="token class-name">VMSupportsCS8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
	        <span class="token comment">// 获取AtomicLong类的属性value在实例数据区中的偏移量</span>
            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span>objectFieldOffset
                <span class="token punctuation">(</span><span class="token class-name">AtomicLong</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// volatile 修饰,保证当有线程修改该变量的值对其他线程的可见性</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span>

	<span class="token comment">// 原子性的递增1</span>
	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 通过unsafe来完成</span>
        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Unsafe类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Unsafe</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getAndAddLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">long</span> result<span class="token punctuation">;</span>
	<span class="token comment">// 通过自旋的方式给指定的属性设置值</span>
	<span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 获取基于object对象指定offset的属性值</span>
		result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLongVolatile</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 比较该属性的值是否等于目标值result,如果等于,那么就更新为result + value,如果更新失败，再次重试</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> result<span class="token punctuation">,</span> result <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// cas成功的目标值</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 获取对象属性的值</span>
	<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">getLongVolatile</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token keyword">long</span> fieldOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// native 方法</span>
	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">,</span> <span class="token keyword">long</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到<code>AtomicLong#getAndIncrement</code>方法内部直接使用了<code>Unsafe#getAndAddLong</code>方法来完成自增1的操作，在<code>unsafe</code>方法内部会一直自旋获取<code>AtomicLong</code>对象属性<code>value</code>的值，然后<code>cas</code>更新<code>value</code>，如果更新失败那么继续重试</p>
<p>上面的方法简洁明了，但是却看不到底层是如何处理的，所以为了搞清细节，继续深究源码</p>
<h1 id="读取-计算-更新"><a class="markdownIt-Anchor" href="#读取-计算-更新"></a> 读取 计算 更新</h1>
<p>在<code>CPU</code>中要对值做一个更新操作，需要经历读取值，计算值，更新值的过程，比如一个 <code>i = i + 5</code>底层会生成三条汇编指令：</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">&#x2F;&#x2F; 读取：从内存读取地址i的值
MOV AX, iaddr
&#x2F;&#x2F; 计算：对寄存器中的值进行加 5 操作
ADD AX, 5    
&#x2F;&#x2F; 更新：将计算后的结果写回到内存中的 i
MOV iaddr, AX <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果多个线程同时对<code>i</code>进行读写操作，那么最终的结果很有可能会与预期不一致</p>
<table>
<thead>
<tr>
<th>执行时序</th>
<th>线程</th>
<th>内存 i 地址存储的值</th>
<th>读取(AX = i)</th>
<th>AX 计算</th>
<th>更新(i = AX)</th>
<th>线程状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>A</td>
<td>10</td>
<td>10</td>
<td></td>
<td></td>
<td><code>RUNNING</code> (context switch)</td>
</tr>
<tr>
<td>2</td>
<td>B</td>
<td>10</td>
<td>10</td>
<td>AX = 20 = AX + 10</td>
<td>i = AX = 20</td>
<td><code>RUNNING</code></td>
</tr>
<tr>
<td>3</td>
<td>A</td>
<td>20</td>
<td>10</td>
<td>AX = 15 = AX + 5</td>
<td>i = AX = 15</td>
<td><code>RUNNING</code></td>
</tr>
<tr>
<td>4</td>
<td>A</td>
<td>15</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>B</td>
<td>15</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>可以看到表格最后<code>i</code>的值为15，<code>B线程</code>所做的更新被<code>A线程</code>覆盖，与预期的20不一致，在<code>i</code>上发生了线程安全问题，为了保证计算与更新值的结果是正确的，一般通过两种途径：</p>
<ul>
<li>对关于<code>i</code>的临界区代码加锁，确保同一时刻只有一个线程能执行临界区中的代码</li>
<li>要么通过CAS指令来自旋更新，直到更新成功</li>
</ul>
<h1 id="cas指令"><a class="markdownIt-Anchor" href="#cas指令"></a> CAS指令</h1>
<blockquote>
<p><code>CAS</code>的全称为：Compare And Swap，顾名思义就是比较目标地址的值是否与期望值相等，如果相等就把目标值更新到目标地址中</p>
</blockquote>
<p>在解析底层源码之前，先了解一下<code>cas</code>底层的指令<br />
我们常用的<code>cpu</code>一般为两种架构，分别是<code>x86</code>和<code>arm</code>，这两种架构都有各自的指令集，指令集中都定义了各自的cas指令</p>
<ul>
<li><code>X86</code>：指令复杂，性能优秀，功耗较高，广泛用于PC，服务器等领域</li>
<li><code>ARM</code>：指令精简，保证一定性能的同时，功耗表现出色，广泛用于移动端中断，嵌入式设备等领域</li>
</ul>
<h2 id="x86"><a class="markdownIt-Anchor" href="#x86"></a> X86</h2>
<blockquote>
<p>下文指令介绍来源于 Intel 开发人员手册 <a href="https://www.intel.cn/content/www/cn/zh/content-details/782158/intel-64-and-ia-32-architectures-software-developer-s-manual-combined-volumes-1-2a-2b-2c-2d-3a-3b-3c-3d-and-4.html?wapkw=intel%2064%20and%20ia-32%20architectures%20software%20developer%27s%20manual&amp;docid=782158">Intel® 64 和 IA-32 架构软件开发人员手册合并卷：1、2A、2B、2C、2D、3A、3B、3C、3D 和 4</a></p>
</blockquote>
<p>在X86中，定义了指令<code>CMPXCHG</code>，它的基本功能是比较EAX寄存器的值和指定内存地址的值，如果相等，则将内存地址中的值替换为指定操作数的值，如果不相等，则将内存地址中的值加载到EAX寄存器中</p>
<ul>
<li><code>CMPXCHG</code>指令原型：<code>CMPXCHG address, new_value</code>
<ul>
<li>将比较值放入<code>EAX</code>寄存器的指令要先于<code>CMPXCHG</code>指令之前定义：<code>MOV EAX, expected_value</code></li>
</ul>
</li>
</ul>
<p>可以看到，<code>CMPXCHG</code> 指令将值的读取和比较更新分为了两步，先需要将目标地址的期望值放入<code>EAX</code>寄存器，再来执行<code>CMPXCHG</code>指令完成比较并交换的操作，因此只是保证了<strong>比较和更新</strong>操作的原子性，不能保证读取到的数据一定是最新的，所以会出现CAS失败的情况，因此上层需要通过自旋来执行CAS操作，确保能够完成更新。</p>
<p>我们通过<code>CMPXCHG</code>指令可以完成比较值和更新值的原子性，但如果只通过该指令就能完成原子操作了吗，显然没有这么简单，听我细细道来</p>
<h2 id="cpu-缓存"><a class="markdownIt-Anchor" href="#cpu-缓存"></a> CPU 缓存</h2>
<blockquote>
<p>详细了解<code>CPU</code>缓存体系可移步这篇博客 <a  href="/posts/1a5fbe08.html">CPU缓存与MESI协议</a></p>
<ul>
<li>下面的内容大部分来源于该博客</li>
</ul>
</blockquote>
<p><code>cpu</code>在将数据写入到目标地址之前，需要将数据先从内存读取到<code>L1数据缓存</code>，再从<code>L1数据缓存</code>读取到<code>寄存器</code>中，经过<code>ALU</code>计算，再通过<code>mov</code>系列指令把数据拷贝到目标地址，但此时只是写入<code>L1数据缓存</code>，而<code>L1数据缓存</code>它是<code>cpu</code>私有的，那么在多cpu环境下(<em>假设每个cpu只有一个核</em>)，如果没有额外的手段，就会造成<code>cpu A</code>对地址<code>A</code>的值的更新操作是对其他<code>cpu</code>是不可见的，因为此时最新的数据只是在它自己的<code>L1私有数据缓存</code>中，对于这个问题，聪明的<code>cpu</code>设计师当然给出了解决办法</p>
<h3 id="lock-指令"><a class="markdownIt-Anchor" href="#lock-指令"></a> Lock# 指令</h3>
<blockquote>
<p>关于Intel 开发人员手册 对 Lock# 指令的介绍可以查阅下面的文章</p>
<ul>
<li>–  卷2 Chapter 3.3  LOCK—Assert LOCK# Signal Prefix   1213 页</li>
<li>–  卷3 Chapter 10.1 Locked Atomic Operations  3368页<br />
下面的内容大部分来自于该手册</li>
</ul>
</blockquote>
<p>Intel 为<code>cpu</code>提供了 Lock# 指令，将该指令与特定指令结合使用可以保证多个<code>CPU</code>对目标共享地址的操作是互斥的，因为Lock 指令需要和其他指令结合使用因此也称为 <code>Lock 锁前缀</code></p>
<p>在早期的Intel cpu中(<em>如Pentium</em>)，Lock 锁前缀指令总是会通过总线仲裁器来锁定总线，保证了特定的指令在执行时是原子的以及多处理器环境下读写目标地址数据的一致性，防止其他<code>CPU</code>同时访问或修改同一内存地址的数据，但这种方式会导致其他Cpu在总线锁定的期间，因为处理器无法使用总线去访问内存而导致的阻塞(stall)，导致了性能的急剧降低，因此在<code>P6</code>以及后续Intel处理器中，增加了<code>缓存行锁定</code>技术来解决因总线锁定而导致的性能瓶颈</p>
<h4 id="总线仲裁器"><a class="markdownIt-Anchor" href="#总线仲裁器"></a> 总线仲裁器</h4>
<p>在介绍下面的概念之前，我想先介绍一个重要的硬件单元<code>总线仲裁器</code>，总线仲裁器它连接了所有设备所访问的总线，包括地址总线，数据总线，控制总线，它管理多个设备对共享总线的访问请求，确保在同一时间只有一个设备能够访问总线，从而避免数据冲突和不一致性</p>
<ul>
<li><code>地址总线(Address Bus)</code>：用于指定数据传输的目标地址</li>
<li><code>数据总线(Data Bus)</code>：用于数据的传输</li>
<li><code>控制总线</code>：用于传输控制信号，如读写命令，中断请求等</li>
</ul>
<p>工作流程</p>
<ol>
<li>接受请求：接收来自各个设备(如cpu，dma控制器，i/o设备等)的总线访问请求</li>
<li>分配总线使用权：根据某种算法(如固定优先级，轮询等)决定哪个设备获得总线的使用权</li>
<li>释放总线使用权：当设备完成数据传输后，释放总线使用权，允许其他设备访问总线</li>
</ol>
<h4 id="总线锁定"><a class="markdownIt-Anchor" href="#总线锁定"></a> 总线锁定</h4>
<p>介绍一下总线锁定的流程，以理解为什么能保证指令执行的原子性和读写数据的一致性，性能瓶颈发生的原因</p>
<ol>
<li>CPU在执行<code>lock</code> 前缀指令时，会使能总线锁定引脚(Lock#)，向总线仲裁器发送电信号，该信号伴随当前总线周期(如内存读/写操作)持续有效，直至操作完成</li>
<li>总线仲裁器检测到<code>Lock</code>信号，会冻结当前请求仲裁队列，暂停处理其他设备的总线请求，确保当前CPU的操作不受干扰，阻止其他设备抢占总线</li>
<li>在<code>Lock</code>有效期间，CPU完全独占总线可以安全的对共享内存执行读写操作</li>
<li>CPU完成<code>Lock</code>指令后，撤销<code>Lock</code>信号，总线仲裁器恢复正常工作，其他设备此时可以竞争访问总线</li>
</ol>
<p>可以看到整个流程，总线锁定需要一直等待<code>lock</code>指令的执行完成才能释放总线，在此期间，所有设备都无法访问总线，可想而知对性能的影响有多大</p>
<h4 id="缓存行锁定"><a class="markdownIt-Anchor" href="#缓存行锁定"></a> 缓存行锁定</h4>
<blockquote>
<p>下面内容都来源下面这篇博客，此处为了该篇博客的完整性，提供对缓存行以及相关概念的简要说明，详细细节请看：</p>
<ul>
<li><a  href="/posts/1a5fbe08.html">CPU缓存与MESI协议</a></li>
</ul>
</blockquote>
<h5 id="缓存结构"><a class="markdownIt-Anchor" href="#缓存结构"></a> 缓存结构</h5>
<p>处理器在访问内存时通常需要100到300个周期，这意味着在这个访存周期中，cpu只能干等着内存控制器将数据响应给cpu，为了提高效率，弥补处理器与内存之间的差距，因此在处理器与内存之间增加了缓存结构，分为<code>L1</code>，<code>L2</code>，<code>L3</code>三级缓存，<code>L1缓存</code>和<code>L2缓存</code>是<code>cpu核心</code>私有，而<code>L3</code>缓存则属于同一个<code>cpu</code>的核心共享，越靠近cpu的速度也就越快，但是可存储的容量也越小</p>
<h5 id="缓存行状态"><a class="markdownIt-Anchor" href="#缓存行状态"></a> 缓存行状态</h5>
<p>不管是L1，L2，L3缓存，其缓存行的状态都会在<code>Modified</code>,<code>Exclusive</code>,<code>Shared</code>,<code>Invalidate</code>四个状态中切换</p>
<ul>
<li><code>Modified</code>：当前缓存行中的副本数据已被修改，意味着内存中的数据是过期的</li>
<li><code>Exclusive</code>：处于该状态的缓存行表示只存在当前cpu的缓存中，并且与内存中的副本相同</li>
<li><code>Shared</code>：处于该状态的缓存行意味着同时也存在其他cpu的缓存中，并且与内存中的副本相同</li>
<li><code>Invalidate</code>：处于该状态的缓存行表示是失效状态无法访问，需要重新执行缓存行填充</li>
</ul>
<h5 id="内存目录"><a class="markdownIt-Anchor" href="#内存目录"></a> 内存目录</h5>
<p>内存目录是多核处理器系统中用于高效管理缓存一致性的关键硬件结构，它通过记录内存块<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>在各级缓存中的状态和位置，减少了传统<code>侦听</code>(<em>Snooping</em>)协议中的广播开销</p>
<ul>
<li>如果没有内存目录记录内存块的信息，那么根据传统<code>侦听协议</code>的处理，需要在总线上广播请求，缓存了该内存块的<code>cpu</code>收到请求后则给出响应，没有则访问主存</li>
</ul>
<blockquote>
<p>内存目录通常集成在内存控制器或者是L3缓存中</p>
</blockquote>
<p>内存目录的作用就是对缓存状态进行跟踪，它会记录每个内存块(缓存行)的缓存副本分布在哪些<code>cpu</code>中，以及在这些<code>cpu</code>缓存中的状态，通过精确的目录信息，避免向所有<code>cpu</code>广播请求，仅发送给持有有效状态缓存的<code>cpu</code>，减少了无效的总线侦听流量</p>
<h5 id="缓存状态的维护"><a class="markdownIt-Anchor" href="#缓存状态的维护"></a> 缓存状态的维护</h5>
<p>缓存行的状态是由缓存一致性<code>MESI</code>协议维护，当某个<code>cpu</code>核心想要写入某个地址的数据时，必须要在L1缓存中持有该内存块的缓存行，并且缓存行状态必须为<code>E</code>或<code>M</code>的，如果是其他状态(<code>R</code>或者<code>I</code>)或者没有未在缓存行命中，那么就需要通过额外的方式来获取对该地址的可修改权力，如果有<code>cpu</code>，这是缓存一致性协议为了保证多核之间的缓存数据的一致性所规定的</p>
<h5 id="cpu-读取内存数据流程"><a class="markdownIt-Anchor" href="#cpu-读取内存数据流程"></a> cpu 读取内存数据流程</h5>
<p>cpu在读取内存数据时，首先会检查最近的L1缓存，如果命中就直接返回，未命中则向下查询L2缓存，如果L2缓存命中，那么返回数据并写入L1缓存，未命中，继续查询L3缓存，如果命中，返回数据并写入L2缓存和L1缓存，如果未命中，那么会通过向内存控制器发送<code>BusRead</code>请求，内存控制器会检查内存目录，查看该地址的数据是否被其他cpu缓存，如果是，则在总线上广播请求，持有了该地址缓存行的<code>cpu</code>会响应数据，如果状态是M，根据<code>缓存一致性协议</code>，那么需要将缓存行的数据写入主存，并将状态修改为S，如果其他<code>cpu</code>的缓存中没有该地址的数据，则内存控制器需要访问主存，并通过预取技术读取包含该目标地址前后的64个字节，然后将数据按顺序从主存填充到L3，并且同时触发L2和L1的<code>级联填充</code>，数据写入各自的缓存</p>
<h5 id="cpu-写入内存数据流程"><a class="markdownIt-Anchor" href="#cpu-写入内存数据流程"></a> cpu 写入内存数据流程</h5>
<p>cpu 将数据写入目标内存地址之前，首先会检查是否持有该目标内存地址的缓存行，如果持有，并且状态是<code>E</code>，那么直接写入，并且更改缓存行状态为<code>M</code>，</p>
<h3 id="arm"><a class="markdownIt-Anchor" href="#arm"></a> ARM</h3>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>内存块通常对应一个缓存行 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>hotspot</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JMM</title>
    <url>/posts/cff6dd61.html</url>
    <content><![CDATA[<h3 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h3>
<p>在Java这个世界中，如果把JVM比作一个运行java代码的生态土壤，那么JMM就是Java中的生态法则，它规定了这个世界的运行规则，定义了线程本地的变量读取存储，多线程之间的变量共享规则，并屏蔽了底层不同cpu架构，系统之间的差别，我们只需要遵守规范便可以开发出稳定可靠的单/多线程应用</p>
<h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3>
<p><a href="https://docs.oracle.com/javase/specs/jls/se23/html/jls-17.html#jls-17.4"><code>JMM(Java Memory Model)</code></a>：是 Java 语言规范定义的一组规则，用于协调多线程之间的内存访问操作，保证多线程程序在不同的硬件和操作系统平台上都能正确地执行。下面从几个方面对 JMM 进行完整的描述：</p>
<h4 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h4>
<p><code>主内存 (Main Memory)</code>: 主内存是所有线程共享的内存区域，它存储了Java的对象，静态变量，类信息，常量池信息<br />
<code>工作内存(Working Memory)</code>: 每个线程都有自己独立的工作内存，它是线程私有的，线程在执行过程中，会将主内存的数据拷贝到自己的工作内存，操作完成后再将结果写回主内存</p>
<blockquote>
<p>定义上面的概念是解决不同平台以及不同硬件架构下的内存交互约束，在具体实现上主内存可以看作是RAM，而工作内存看作是寄存器，CPU缓存以及局部变量表(这个是栈帧中的一块区域，这块区域的大小编译期就可以确定下来)</p>
</blockquote>
<h4 id="工作内存之局部变量表"><a class="markdownIt-Anchor" href="#工作内存之局部变量表"></a> 工作内存之局部变量表</h4>
<p>局部变量表是栈帧中开辟的一块确定大小的连续内存区域，用于存放方法中使用到的变量</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<blockquote>
<p>如果对局部变量表是如何在栈帧中创建感兴趣，可以在这篇博客找到答案 <a  href="/posts/48bea92d.html">Hotspot源码剖析Java方法执行流程</a></p>
</blockquote>
<h4 id="编译优化"><a class="markdownIt-Anchor" href="#编译优化"></a> 编译优化</h4>
<p>Java的字节码通常是由解释器和编译器相互配合执行的，为了让Java应用能够更快速的启动通常是解释器先发挥作用，逐行解释字节码指令转换成为对应平台的</p>
<p>=======<br />
<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>jdk8u hotspot <code>CppInterpreter.cpp</code> 是一个c++编写的字节码解释器，其中编写了如何关联局部变量表以及解释执行字节码指令的代码，接下来让我们看源码来了解方法的执行过程以及字节码解释执行的流程</p>
<ol>
<li>执行java方法的入口</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int CppInterpreter::normal_entry(Method* method, intptr_t UNUSED, TRAPS) &#123;  
  JavaThread *thread &#x3D; (JavaThread *) THREAD;  
  &#x2F;&#x2F; Allocate and initialize our frame. 
  &#x2F;&#x2F; 为方法分配并初始化栈帧，其内部就会创建我们的局部变量表，以及设置bcp指针
  InterpreterFrame *frame &#x3D; InterpreterFrame::build(method, CHECK_0);
  &#x2F;&#x2F; 保存我们的栈帧到线程栈中  
  thread-&gt;push_zero_frame(frame);  
  &#x2F;&#x2F; Execute those bytecodes!  
  &#x2F;&#x2F; 进入执行字节码的主入口
  main_loop(0, THREAD);  
  
  &#x2F;&#x2F; No deoptimized frames on the stack  
  return 0;  
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>构建方法栈帧</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">InterpreterFrame *InterpreterFrame::build(Method* const method, TRAPS) &#123;
  JavaThread *thread &#x3D; (JavaThread *) THREAD;
  ZeroStack *stack &#x3D; thread-&gt;zero_stack();

  &#x2F;&#x2F; Calculate the size of the frame we&#39;ll build, including
  &#x2F;&#x2F; any adjustments to the caller&#39;s frame that we&#39;ll make.
  &#x2F;&#x2F; 方法内部局部变量数量
  int extra_locals  &#x3D; 0;
  &#x2F;&#x2F; 监视器占用空间大小
  int monitor_words &#x3D; 0;
  &#x2F;&#x2F; 局部变量表变量个数&#x2F;长度
  int stack_words   &#x3D; 0;
  &#x2F;&#x2F; 注意，上面的参数编译期就可以确定下来，可以通过javap -l .class 看到局部变量表信息
  &#x2F;&#x2F; 所以这里只是取出来然后分配一个大小合适的局部变量表来存储方法中所操作的变量
  if (!method-&gt;is_native()) &#123;
	&#x2F;&#x2F; 局部变量表长度 - 方法参数 得到 方法内部定义的局部变量个数
    extra_locals &#x3D; method-&gt;max_locals() - method-&gt;size_of_parameters();
    &#x2F;&#x2F; 局部变量表solt个数
    stack_words  &#x3D; method-&gt;max_stack();
  &#125;
  if (method-&gt;is_synchronized()) &#123;
	&#x2F;&#x2F; 方法是同步的，那么需要分配一个solt存储
    monitor_words &#x3D; frame::interpreter_frame_monitor_size();
  &#125;
	&#x2F;&#x2F; 检查是否栈溢出
  stack-&gt;overflow_check(
    extra_locals + header_words + monitor_words + stack_words, CHECK_NULL);

  &#x2F;&#x2F; Adjust the caller&#39;s stack frame to accomodate any additional
  &#x2F;&#x2F; local variables we have contiguously with our parameters.
  &#x2F;&#x2F; push() -&gt; *(--sp) &#x3D; value 栈扩容（在操作系统里，栈的增长是向低地址增长的，而数据段是向上扩容的），预先占用局部变量的空间
  for (int i &#x3D; 0; i &lt; extra_locals; i++)
    stack-&gt;push(0);
    &#x2F;&#x2F; 指向局部变量表最后一个槽位的指针
  intptr_t *locals;
  if (method-&gt;is_native())
	  &#x2F;&#x2F; 如果是native方法,没有方法局部变量,只需要在栈帧有存放方法参数的空间即可
    locals &#x3D; stack-&gt;sp() + (method-&gt;size_of_parameters() - 1);
  else
	  &#x2F;&#x2F; java方法 (注意：sp已经扩容了extra_locals个位置)
    locals &#x3D; stack-&gt;sp() + (method-&gt;max_locals() - 1);

  stack-&gt;push(0); &#x2F;&#x2F; next_frame, filled in later
  intptr_t *fp &#x3D; stack-&gt;sp();
  assert(fp - stack-&gt;sp() &#x3D;&#x3D; next_frame_off, &quot;should be&quot;);

  stack-&gt;push(INTERPRETER_FRAME);
  assert(fp - stack-&gt;sp() &#x3D;&#x3D; frame_type_off, &quot;should be&quot;);

  interpreterState istate &#x3D;
    (interpreterState) stack-&gt;alloc(sizeof(BytecodeInterpreter));
  assert(fp - stack-&gt;sp() &#x3D;&#x3D; istate_off, &quot;should be&quot;);

  istate-&gt;set_locals(locals);
  istate-&gt;set_method(method);
  istate-&gt;set_self_link(istate);
  istate-&gt;set_prev_link(NULL);
  istate-&gt;set_thread(thread);
  istate-&gt;set_bcp(method-&gt;is_native() ? NULL : method-&gt;code_base());
  istate-&gt;set_constants(method-&gt;constants()-&gt;cache());
  istate-&gt;set_msg(BytecodeInterpreter::method_entry);
  istate-&gt;set_oop_temp(NULL);
  istate-&gt;set_mdx(NULL);
  istate-&gt;set_callee(NULL);

  istate-&gt;set_monitor_base((BasicObjectLock *) stack-&gt;sp());
  if (method-&gt;is_synchronized()) &#123;
    BasicObjectLock *monitor &#x3D;
      (BasicObjectLock *) stack-&gt;alloc(monitor_words * wordSize);
    oop object;
    if (method-&gt;is_static())
      object &#x3D; method-&gt;constants()-&gt;pool_holder()-&gt;java_mirror();
    else
      object &#x3D; (oop) (void*)locals[0];
    monitor-&gt;set_obj(object);
  &#125;

  istate-&gt;set_stack_base(stack-&gt;sp());
  istate-&gt;set_stack(stack-&gt;sp() - 1);
  if (stack_words)
    stack-&gt;alloc(stack_words * wordSize);
  istate-&gt;set_stack_limit(stack-&gt;sp() - 1);

  return (InterpreterFrame *) fp;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>主入口</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">

<span class="token keyword">void</span> CppInterpreter<span class="token operator">::</span><span class="token function">main_loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> recurse<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  # 当前java线程
  JavaThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span> THREAD<span class="token punctuation">;</span>
  <span class="token comment">// 线程栈</span>
  ZeroStack <span class="token operator">*</span>stack <span class="token operator">=</span> thread<span class="token operator">-></span><span class="token function">zero_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// If we are entering from a deopt we may need to call</span>
  <span class="token comment">// ourself a few times in order to get to our frame.</span>
  <span class="token comment">// 递归调用，不太理解</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>recurse<span class="token punctuation">)</span>
    <span class="token function">main_loop</span><span class="token punctuation">(</span>recurse <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 转换为解释器栈帧类型</span>
  InterpreterFrame <span class="token operator">*</span>frame <span class="token operator">=</span> thread<span class="token operator">-></span><span class="token function">top_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">as_interpreter_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 解释器状态[该状态信息包含了执行方法所需要的一切信息，包括不仅限于当前线程，栈，栈帧，本地变量表，pc,sp 地址]</span>
  interpreterState istate <span class="token operator">=</span> frame<span class="token operator">-></span><span class="token function">interpreter_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Method<span class="token operator">*</span> method <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">intptr_t</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> result_slots <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 循环里是因为有执行的指令条件不满足，从而进入对应的分支再执行指令</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// We can set up the frame anchor with everything we want at</span>
    <span class="token comment">// this point as we are thread_in_Java and no safepoints can</span>
    <span class="token comment">// occur until we go to vm mode.  We do have to clear flags</span>
    <span class="token comment">// on return from vm but that is it.</span>
    <span class="token comment">// 设置java线程的sp以及fp寄存器，并且让java pc地址清空</span>
    <span class="token comment">// src\cpu\zero\vm\javaFrameAnchor_zero.hpp#set(intptr_t* sp, address pc, ZeroFrame* fp)</span>
    thread<span class="token operator">-></span><span class="token function">set_last_Java_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Call the interpreter</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>JvmtiExport<span class="token operator">::</span><span class="token function">can_post_interpreter_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      BytecodeInterpreter<span class="token operator">::</span><span class="token function">runWithChecks</span><span class="token punctuation">(</span>istate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token comment">// 这里就是执行字节码指令的关键之处，会</span>
      BytecodeInterpreter<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span>istate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fixup_after_potential_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Clear the frame anchor</span>
    thread<span class="token operator">-></span><span class="token function">reset_last_Java_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Examine the message from the interpreter to decide what to do</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>call_method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      Method<span class="token operator">*</span> callee <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">callee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Trim back the stack to put the parameters at the top</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Make the call</span>
      Interpreter<span class="token operator">::</span><span class="token function">invoke_method</span><span class="token punctuation">(</span>callee<span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">callee_entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fixup_after_potential_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Convert the result</span>
      istate<span class="token operator">-></span><span class="token function">set_stack</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Restore the stack</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Resume the interpreter</span>
      istate<span class="token operator">-></span><span class="token function">set_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>method_resume<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>more_monitors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> monitor_words <span class="token operator">=</span> frame<span class="token operator">::</span><span class="token function">interpreter_frame_monitor_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Allocate the space</span>
      stack<span class="token operator">-></span><span class="token function">overflow_check</span><span class="token punctuation">(</span>monitor_words<span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>HAS_PENDING_EXCEPTION<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      stack<span class="token operator">-></span><span class="token function">alloc</span><span class="token punctuation">(</span>monitor_words <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Move the expression stack contents</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span> <span class="token operator">*</span>p <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>

      <span class="token comment">// Move the expression stack pointers</span>
      istate<span class="token operator">-></span><span class="token function">set_stack_limit</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>
      istate<span class="token operator">-></span><span class="token function">set_stack</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>
      istate<span class="token operator">-></span><span class="token function">set_stack_base</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Zero the new monitor so the interpreter can find it.</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span>BasicObjectLock <span class="token operator">*</span><span class="token punctuation">)</span> istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">set_obj</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Resume the interpreter</span>
      istate<span class="token operator">-></span><span class="token function">set_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>got_monitors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>return_from_method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Copy the result into the caller's frame</span>
      result_slots <span class="token operator">=</span> type2size<span class="token punctuation">[</span>method<span class="token operator">-></span><span class="token function">result_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>result_slots <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> result_slots <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"what?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result_slots<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>throwing_exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>HAS_PENDING_EXCEPTION<span class="token punctuation">,</span> <span class="token string">"should do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>do_osr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Unwind the current frame</span>
      thread<span class="token operator">-></span><span class="token function">pop_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Remove any extension of the previous frame</span>
      <span class="token keyword">int</span> extra_locals <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> method<span class="token operator">-></span><span class="token function">size_of_parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra_locals<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Jump into the OSR method</span>
      Interpreter<span class="token operator">::</span><span class="token function">invoke_osr</span><span class="token punctuation">(</span>
        method<span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">osr_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">osr_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">ShouldNotReachHere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Unwind the current frame</span>
  thread<span class="token operator">-></span><span class="token function">pop_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Pop our local variables</span>
  stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Push our result</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Adjust result to smaller</span>
    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">intptr_t</span> res<span class="token punctuation">;</span>
      jint res_jint<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result_slots <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      BasicType t <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">result_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_subword_type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res_jint <span class="token operator">=</span> <span class="token punctuation">(</span>jint<span class="token punctuation">)</span><span class="token function">narrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> res_jint<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    stack<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="编译优化-2"><a class="markdownIt-Anchor" href="#编译优化-2"></a> 编译优化</h4>
<p>Java的字节码通常是由解释器和编译器相互配合执行的，为了让Java应用能够更快速的启动通常是解释器先发挥作用，逐行解释字节码指令转换成为对应平台的</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>d285c6a6ba6cf1268fd57a563c42e4e07f0b53c9</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>CppInterpreter是用C++实现的字节码解释器，优点是实现相对简单容易理解，缺点就是执行慢，所以通常会使用TemplateInterpreter实现的模板解释器，它对每一个字节码指令都对应了一段汇编代码来实现，启动时会对字节码与对应的汇编代码入口做绑定，效率要高很多<br />
<a href="https://book.douban.com/annotation/31407691/">第232页 7.2.1 Interpreter模块</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>hotspot</category>
      </categories>
  </entry>
  <entry>
    <title>Liunx编译OpenJdk 8U</title>
    <url>/posts/09618d5b.html</url>
    <content><![CDATA[<blockquote>
<p>古人学问无遗力，少壮工夫老始成。 纸上得来终觉浅，绝知此事要躬行。</p>
</blockquote>
<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2>
<p>在学习<code>openjdk 8u</code>源码时，对于<code>CppInterpreter</code>栈帧中局部变量表的分配始终疑惑不解，只能来调试源码来获得答案，因此有了这篇博客</p>
<p><strong>本机环境</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsb_release <span class="token parameter variable">-a</span>
	No LSB modules are available.
	Distributor ID: Ubuntu
	Description:    Ubuntu <span class="token number">22.04</span>.5 LTS
	Release:        <span class="token number">22.04</span>
	Codename:       jammy
架构：                    x86_64
  CPU 运行模式：          <span class="token number">32</span>-bit, <span class="token number">64</span>-bit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2>
<h3 id="下载-open-jdk-7u"><a class="markdownIt-Anchor" href="#下载-open-jdk-7u"></a> 下载 open jdk 7u</h3>
<p>编译某个版本的jdk需要用前一个版本来指定为为<code>bootjdk</code>，所以编译<code>jdk8u</code>需要使用<code>jdk7u</code>作为<code>bootjdk</code>来编译</p>
<ul>
<li>通过<a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html">Java Archive Downloads - Java SE 7</a>链接可以下载jdk7</li>
</ul>
<p>配置环境变量 修改 <code>sudo vim /etc/profile</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置成你自己的目录</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/code/tmp/jdk1.7.0_80 
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>一定要配置，否则编译时会找不到Java内部的相关类</li>
</ul>
<h3 id="下载源码"><a class="markdownIt-Anchor" href="#下载源码"></a> 下载源码</h3>
<p>我采用的是<code>jdk8u</code>版本的源码，也可以换成自己的版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/openjdk/jdk8u.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不过由于github时不时无法访问，可以使用镜像站来克隆，如果无法使用，尝试搜索其他镜像站</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://kkgithub.com/openjdk/jdk8u.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="下载构建工具"><a class="markdownIt-Anchor" href="#下载构建工具"></a> 下载构建工具</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装编译器及构建工具</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc g++ gdb <span class="token function">make</span>
<span class="token comment"># 下载安装依赖包</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libasound2-dev libfreetype6-dev libcups2-dev libfontconfig1-dev libxext-dev libxrender-dev libxtst-dev libxt-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3>
<p><strong>配置阶段</strong></p>
<p>进入 <code>jdk8u</code>目录，执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> ./configure <span class="token punctuation">\</span>
--with-debug-level<span class="token operator">=</span>slowdebug <span class="token punctuation">\</span>
--with-jvm-interpreter<span class="token operator">=</span>cpp <span class="token punctuation">\</span>
--with-jvm-variants<span class="token operator">=</span>zero <span class="token punctuation">\</span>
--disable-zip-debug-info <span class="token punctuation">\</span>
--with-target-bits<span class="token operator">=</span><span class="token number">64</span> <span class="token punctuation">\</span>
--with-boot-jdk<span class="token operator">=</span>/code/tmp/jdk1.7.0_80 <span class="token punctuation">\</span>
--with-freetype-include<span class="token operator">=</span>/usr/include/freetype2 <span class="token punctuation">\</span>
--with-freetype-lib<span class="token operator">=</span>/usr/lib/x86_64-linux-gnu/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参数含义</p>
<ul>
<li><code>with-debug-level</code>：调试信息级别</li>
<li><code>with-jvm-interpreter</code>：使用的解释器类型，这里使用cpp解释器</li>
<li><code>with-jvm-variants</code>：构建的jvm种类 <code>zero</code>不使用任何即时编译器，只解释执行不编译</li>
<li><code>with-target-bits</code>：64位</li>
<li><strong><code>with-boot-jdk</code></strong>: <strong>重点</strong>，设置成你自己jdk7的目录</li>
<li>另外两个参数固定配置，和字体有关，无需在意</li>
</ul>
<blockquote>
<p>想对参数进行调整以编译其他版本的jdk请看官方文档<a href="https://hg.openjdk.org/jdk8u/jdk8u/raw-file/tip/README-builds.html#make">OpenJDK Build README</a> 或者查看<code>jdk8u\common\autoconf\jdk-options.m4</code>文件，都对参数作用以及可取值做了详细介绍</p>
</blockquote>
<p><strong>编译阶段</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 需要保证有python环境</span>
<span class="token comment"># 安装pip</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip
<span class="token comment"># pip安装 compiledb</span>
<span class="token function">sudo</span> pip <span class="token function">install</span> compiledb
<span class="token comment"># 构建，并使用compiledb工具生成Compilation Database</span>
compiledb <span class="token function">make</span> all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译完成可以进入目录执行<code>java -version</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./build/linux-x86_64-normal-zero-slowdebug/jdk/bin/

./java <span class="token parameter variable">-version</span>
<span class="token comment"># 执行下面的输出说明编译成功了</span>
openjdk version <span class="token string">"1.8.0_452-internal-debug"</span> OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_452-internal-debug-root_2025_02_20_13_27-b00<span class="token punctuation">)</span> OpenJDK <span class="token number">64</span>-Bit Zero VM <span class="token punctuation">(</span>build <span class="token number">25.452</span>-b00-debug, interpreted mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="调试"><a class="markdownIt-Anchor" href="#调试"></a> 调试</h3>
<p>下面是 windows clion 远程调试 liunx 上的 jdk</p>
<ol>
<li>在liunx上安装 <code>gdbserver</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> gdbserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>windows上安装 <code>mingw</code></li>
</ol>
<ul>
<li>点击链接下载<a href="https://github.com/niXman/mingw-builds-binaries/releases">Releases · niXman/mingw-builds-binaries</a>,解压配置bin目录的环境变量</li>
<li>cmd 输入 <code>g++ --version</code> 输出版本信息即成功</li>
</ul>
<img src="/posts/09618d5b/soft_version.png" class="" title="soft_version">
<p>需要注意要下载和liunx上安装的<code>gdbserver</code>相同的大版本，否则会出现问题，可通过<code>gdbserver --version</code>查看版本信息</p>
<ol>
<li>开启远程调试</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdbserver :1234 ./build/linux-x86_64-normal-zero-slowdebug/jdk/bin//java xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>clion 打开jdk项目，在<code>edit configurations</code>中添加<code>remote debug</code>，
<ol>
<li>输入  远程主机ip:port(gdbserver port)</li>
<li><strong>配置路径映射</strong>，这个地方踩坑了，必须配置，否则无法debug</li>
</ol>
</li>
</ol>
<img src="/posts/09618d5b/remote_debug.png" class="" title="remote_debug|375">
<ol>
<li>在跟踪调试之前，还需要设置 GDB 对 SIGSEGV 信号的处理方式，忽略调试时的 SIGSEGV 信号 ，在 ”GDB“ 标签页下的 “(gdb)” 命令行中输入</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">handle SIGSEGV nostop noprint pass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>本文参考链接<br />
<a href="https://www.jianshu.com/p/feaed5853a02">OpenJDK 编译调试指南(Ubuntu 16.04 + MacOS 10.15) - 简书</a><br />
<a href="https://blog.csdn.net/szm1160809039/article/details/131592828">Clion远程调试JDK_clion远程调试linux-CSDN博客</a><br />
<a href="https://blog.csdn.net/weixin_46416035/article/details/127387170">在windows11上安装最新版的gcc/g++（MinGW）–gcc version 12.2.0_最新版g+±CSDN博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>hotspot</category>
      </categories>
  </entry>
  <entry>
    <title>字节码指令执行过程 BytecodeInterpreter</title>
    <url>/posts/1fe4afce.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>源码分析</category>
        <category>hotspot</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>字节码解释器 Interpreter</title>
    <url>/posts/f95e72b6.html</url>
    <content><![CDATA[<blockquote>
<p>半亩方塘一鉴开，天光云影共徘徊。 问渠那得清如许？为有源头活水来。</p>
</blockquote>
<h1 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h1>
<p>在计算机的世界中，如果又无法解决的问题，那么只需要加一个中间层，本文所介绍的解释器同样是遵循这个思想<br />
当我们的java代码通过编译器编译成为字节码后，此时就可以被jvm加载到内存中去解释执行了，为了支持跨平台，JVM会根据不同的硬件平台开发一个专属的解释器用于将字节码指令翻译成为对应平台的机器指令，或者采用一个通用的解释器作为中间层来解释字节码指令然后执行对应的逻辑。</p>
<h1 id="hotspot中的实现"><a class="markdownIt-Anchor" href="#hotspot中的实现"></a> Hotspot中的实现</h1>
<h2 id="interpreter"><a class="markdownIt-Anchor" href="#interpreter"></a> Interpreter</h2>
<p><code>Hotspot</code>是<code>jvm</code>的实现之一，在<code>jdk8u</code>中的<code>Hotspot</code>中有以下两个<code>解释器</code></p>
<ul>
<li><code>cppInterpreter</code>：CppInterpreter是用C<ins>实现的字节码解释器，对每一个字节码指令都编写了c</ins>方法来进行处理，优点是实现相对简单容易理解，缺点就是执行慢</li>
<li><code>TemplateInterpreter</code>：TemplateInterpreter实现的模板解释器，它对每一个字节码指令都对应了一段汇编代码来实现，启动时会将字节码指令与对应的汇编代码入口做绑定，当执行到一条字节码指令时会进入对应的汇编代码入口来执行，因此效率要高很多，也是<code>Hotspot</code>中默认使用到的</li>
</ul>
<blockquote>
<p>可以看本文章了解解释器的发展历程 <a href="https://book.douban.com/annotation/31407691/">第232页 7.2.1 Interpreter模块</a><br />
了解编译jdk时如何通过参数指定使用哪个解释器可以参考<a  href="/posts/09618d5b.html">Liunx编译OpenJdk 8U</a></p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 通过宏定义来让Interpreter是继承CppInterpreter还是TemplateInterpreter，从而来启用对应的解释器</span>
class Interpreter<span class="token operator">:</span> public <span class="token function">CC_INTERP_ONLY</span><span class="token punctuation">(</span>CppInterpreter<span class="token punctuation">)</span> <span class="token function">NOT_CC_INTERP</span><span class="token punctuation">(</span>TemplateInterpreter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在介绍中我们提到因为有了解释器java字节码才能跨平台运行，那么是如何跨平台执行的呢？答案就是为每个硬件架构做适配，对就是这么简单，<code>Hotspot</code>基于这两种解释器都提供了以下平台的汇编代码实现</p>
<ul>
<li><code>sparc</code>：SPARC（Scalable Processor Architecture）是一种 RISC 架构，由 Sun Microsystems 开发。它以其高性能、可扩展性和可靠性而闻名，曾经广泛应用于服务器和工作站领域</li>
<li><code>aarch64</code>：AArch64 是 ARM 架构的 64 位执行状态，是 ARMv8 架构引入的新特性。它在 ARM 处理器的发展历程中具有重要意义，为移动设备、嵌入式系统以及服务器市场带来了 64 位计算能力。</li>
<li><code>ppc</code>：PowerPC 是一种精简指令集计算机（RISC）架构，由 IBM、苹果和摩托罗拉（现 NXP 半导体）联合开发。</li>
<li><code>x86</code>：x86 是英特尔公司开发的一系列复杂指令集计算机（CISC）架构，是目前个人计算机和服务器市场中最主流的架构之一
<ul>
<li><code>x86_32</code>：支持32位寻址</li>
<li><code>x86_64</code>：支持64位寻址</li>
</ul>
</li>
<li><code>zero</code>： 零汇编架构，指在不依赖任何架构平台就可以解释并执行字节码指令</li>
</ul>
<p>在编译jdk时可以通过<code>--with-jvm-variants</code>来构建指定架构的jdk（本文也主要zero架构做说明，其它基于汇编的晦涩难懂，有兴趣的自己可以了解）</p>
<p>src/share/vm/interpreter/interpreter.hpp</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">class InterpreterCodelet<span class="token operator">:</span> public Stub <span class="token punctuation">&#123;</span>
<span class="token comment">// .... 省略了代码</span>
<span class="token punctuation">&#125;</span>
class CodeletMark<span class="token operator">:</span> ResourceMark <span class="token punctuation">&#123;</span><span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 通过宏定义来让Interpreter是继承CppInterpreter还是TemplateInterpreter，从而来启用对应的解释器</span>
class Interpreter<span class="token operator">:</span> public <span class="token function">CC_INTERP_ONLY</span><span class="token punctuation">(</span>CppInterpreter<span class="token punctuation">)</span><span class="token function">NOT_CC_INTERP</span><span class="token punctuation">(</span>TemplateInterpreter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  public<span class="token operator">:</span>
  <span class="token comment">// Debugging/printing</span>
  <span class="token keyword">static</span> InterpreterCodelet<span class="token operator">*</span> <span class="token function">codelet_containing</span><span class="token punctuation">(</span>address pc<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>InterpreterCodelet<span class="token operator">*</span><span class="token punctuation">)</span>_code<span class="token operator">-></span><span class="token function">stub_containing</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  
<span class="token comment">// 通过条件编译将指定架构的代码插入进来</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_x86</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"interpreter_x86.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_aarch64</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"interpreter_aarch64.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_sparc</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"interpreter_sparc.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_zero  </span><span class="token comment">// 本文针对该架构所编写</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"interpreter_zero.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_arm</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"interpreter_arm.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_ppc</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"interpreter_ppc.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>interpreter</code>头文件只定义了一些顶层设计的类或者接口，但最主要的是两点</p>
<ul>
<li>通过宏来判断解释器是继承<code>CppInterpreter</code>还是<code>TemplateInterpreter</code></li>
<li>定义了条件编译，将符合架构条件的代码在编译时插入进来</li>
</ul>
<p>上面两个解释器的实现都是继承自 <code>AbstractInterpreter</code>，而<code>AbstractInterpreter</code>中才是重点</p>
<h2 id="abstractinterpreter"><a class="markdownIt-Anchor" href="#abstractinterpreter"></a> AbstractInterpreter</h2>
<p>hotspot/src/share/vm/interpreter/abstractInterpreter.hpp</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// The C++ interface to the bytecode interpreter(s).  </span>
class AbstractInterpreter<span class="token operator">:</span> AllStatic <span class="token punctuation">&#123;</span>  
  friend class VMStructs<span class="token punctuation">;</span>  
  friend class Interpreter<span class="token punctuation">;</span>  
  friend class CppInterpreterGenerator<span class="token punctuation">;</span>  
 public<span class="token operator">:</span>  
  <span class="token keyword">enum</span> <span class="token class-name">MethodKind</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 方法分类,此处为了控制代码长度只保留了常见的几种</span>
    zerolocals<span class="token punctuation">,</span> <span class="token comment">// 需要局部变量表初始化的普通方法 method needs locals initialization  </span>
    zerolocals_synchronized<span class="token punctuation">,</span> <span class="token comment">// 需要局部变量表初始化的普通同步方法</span>
    number_of_method_entries
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
  
 protected<span class="token operator">:</span>  
  <span class="token keyword">static</span> StubQueue<span class="token operator">*</span> _code<span class="token punctuation">;</span> <span class="token comment">// 解释器初始化是会为此赋值，但我理解作用是什么 :( // the interpreter code (codelets)  </span>
  
  <span class="token comment">// method entry points  </span>
  <span class="token keyword">static</span> address    _entry_table<span class="token punctuation">[</span>number_of_method_entries<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// java所有分类的方法对应的 entryPoint 数组,通过MethodKind即可找到对应的进入点  </span>
  
  friend class      AbstractInterpreterGenerator<span class="token punctuation">;</span>  <span class="token comment">// 负责生成Stub以及方法进入点 entryPoint</span>
  friend class              InterpreterGenerator<span class="token punctuation">;</span> 
  
 public<span class="token operator">:</span>  
  <span class="token comment">// Initialization/debugging  </span>
  <span class="token keyword">static</span> <span class="token keyword">void</span>       <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 初始化方法，create_vm时会被调用</span>
  
  <span class="token comment">// 根据方法的元数据返回它的所属分类 MethodKind</span>
  <span class="token keyword">static</span> MethodKind <span class="token function">method_kind</span><span class="token punctuation">(</span>methodHandle m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 根据方法分类MethodKind返回对应的EntryPoint地址  </span>
  <span class="token keyword">static</span> address    <span class="token function">entry_for_kind</span><span class="token punctuation">(</span>MethodKind k<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> k <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> number_of_method_entries<span class="token punctuation">,</span> <span class="token string">"illegal kind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> _entry_table<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  
  <span class="token comment">// 根据方法找到对应的入口点 </span>
  <span class="token comment">// ** 注意: 当类被加载后第一次链接是会遍历方法列表并执行 method->link_method() 方法，内部就会调用此方法获取并绑定对应的EntryPoint **</span>
  <span class="token keyword">static</span> address    <span class="token function">entry_for_method</span><span class="token punctuation">(</span>methodHandle m<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">entry_for_kind</span><span class="token punctuation">(</span><span class="token function">method_kind</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  
  
  <span class="token comment">// 动态生成方法入口点，动态语言使用</span>
  <span class="token comment">// 已被禁用, 通过参数-XX:+UnlockDiagnosticVMOptions -XX:+EnableInvokeDynamic开启</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span>       <span class="token function">set_entry_for_kind</span><span class="token punctuation">(</span>MethodKind k<span class="token punctuation">,</span> address e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token comment">// Runtime support  </span>
  <span class="token comment">// length = invoke bytecode length (to advance to next bytecode)  static address deopt_entry(TosState state, int length) &#123; ShouldNotReachHere(); return NULL; &#125; </span>
  <span class="token comment">// 模板解释器会使用此方法，当执行return语句时会进入处理 </span>
  <span class="token keyword">static</span> address <span class="token function">return_entry</span><span class="token punctuation">(</span>TosState state<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Bytecodes<span class="token operator">::</span>Code code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">ShouldNotReachHere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  
  
  <span class="token keyword">static</span> address    <span class="token function">rethrow_exception_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _rethrow_exception_entry<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
<span class="token comment">//------------------------------------------------------------------------------------------------------------------------  </span>
<span class="token comment">// The interpreter generator.  </span>
  
class Template<span class="token punctuation">;</span>  
class AbstractInterpreterGenerator<span class="token operator">:</span> public StackObj <span class="token punctuation">&#123;</span>  
 protected<span class="token operator">:</span>  
  InterpreterMacroAssembler<span class="token operator">*</span> _masm<span class="token punctuation">;</span>  
  
  <span class="token comment">// shared code sequences  </span>
  <span class="token comment">// Converter for native abi result to tosca result  address generate_result_handler_for(BasicType type);  </span>
  address <span class="token function">generate_slow_signature_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
  <span class="token comment">// 根据MethodKind生成对应的 EntryPoint  </span>
  address <span class="token function">generate_method_entry</span><span class="token punctuation">(</span>AbstractInterpreter<span class="token operator">::</span>MethodKind kind<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
  <span class="token keyword">void</span> <span class="token function">bang_stack_shadow_pages</span><span class="token punctuation">(</span>bool native_call<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
  <span class="token keyword">void</span> <span class="token function">generate_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">void</span> <span class="token function">initialize_method_handle_entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
 public<span class="token operator">:</span>  
  <span class="token function">AbstractInterpreterGenerator</span><span class="token punctuation">(</span>StubQueue<span class="token operator">*</span> _code<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面展示得源码经过删减，AbstractInterpreter主要就是定义了如下几个重要的方法和类以及属性</p>
<ul>
<li><code>MethodKind</code>：表示方法的类型，每种类型的方法有对应<code>EntryPoint</code></li>
<li><code>_entry_table</code>：方法<code>EntryPoint</code>表，用于存储<code>MethodKind</code>对应的<code>EntryPoint</code></li>
<li><code>initialize()</code>：在创建虚拟机时会初始化解释器，其中就会执行该方法</li>
<li><code>entry_for_method(methodHandle m)</code>：根据方法对象返回对应的<code>EntryPoint</code>地址</li>
<li><code>AbstractInterpreterGenerator</code>
<ul>
<li><code>generate_method_entry</code>：根据<code>MethodKind</code>生成对应的<code>EntryPoint</code></li>
<li><code>generate_all()</code>：生成所有方法类型的<code>EntryPoint</code>，<strong>并将其保存到<code>_entry_table</code>属性中</strong></li>
</ul>
</li>
</ul>
<p>AbstractInterpreter才是主要的函数定义接口，由<code>CppInterpreter</code>和<code>TemplateInterpreter</code>来实现，上面我们说到在创建虚拟机时会对解释器进行初始化，在初始化的函数中就会执行它的<code>initialize</code>方法，接着就让我们向下看两个解释器的实现对<code>initialize</code>方法是如何处理的吧</p>
<blockquote>
<p>在此之前可以看下 create_vm 的整体流程是如何调用 <code>initialize</code>方法的</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// src/share/vm/runtime/thread.cpp</span>
jint Threads<span class="token operator">::</span><span class="token function">create_vm</span><span class="token punctuation">(</span>JavaVMInitArgs<span class="token operator">*</span> args<span class="token punctuation">,</span> bool<span class="token operator">*</span> canTryAgain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
<span class="token function">init_globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// hotspot/src/share/vm/runtime/init.cpp</span>
jint <span class="token function">init_globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
<span class="token function">interpreter_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// before any methods loaded</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// hotspot/src/share/vm/interpreter/interpreter.cpp</span>
<span class="token keyword">void</span> <span class="token function">interpreter_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
  Interpreter<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 解释器的 initialize()</span>
	<span class="token comment">// ... </span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="cppinterpreter"><a class="markdownIt-Anchor" href="#cppinterpreter"></a> CppInterpreter</h3>
<img src="/posts/f95e72b6/%E8%A7%A3%E9%87%8A%E5%99%A8initialize%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B.png" class="" title="解释器initialize方法调用流程">
<p>上面已经介绍了<code>CppInterpreter</code>的定义，这里就不再多说，直接看<code>CppInterpreter.hpp</code>代码中定义了什么</p>
<p>hotspot/src/share/vm/interpreter/cppInterpreter.hpp</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// This file contains the platform-independent parts  </span>
<span class="token comment">// of the c++ interpreter  </span>
<span class="token comment">// 继承AbstractInterpreter</span>
class CppInterpreter<span class="token operator">:</span> public AbstractInterpreter <span class="token punctuation">&#123;</span>  
  friend class VMStructs<span class="token punctuation">;</span>  friend class Interpreter<span class="token punctuation">;</span> <span class="token comment">// contains()  </span>
  friend class InterpreterGenerator<span class="token punctuation">;</span> <span class="token comment">// result handlers  </span>
  friend class CppInterpreterGenerator<span class="token punctuation">;</span> <span class="token comment">// result handlers  </span>
 public<span class="token operator">:</span>  
  
 public<span class="token operator">:</span>  <span class="token comment">// Initialization/debugging  </span>
  <span class="token keyword">static</span> <span class="token keyword">void</span>       <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// </span>
  <span class="token comment">// this only returns whether a pc is within generated code for the interpreter.  </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_x86  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"cppInterpreter_x86.hpp"</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_aarch64  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"cppInterpreter_aarch64.hpp"</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_sparc  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"cppInterpreter_sparc.hpp"</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_zero  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"cppInterpreter_zero.hpp"</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_arm  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"cppInterpreter_arm.hpp"</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TARGET_ARCH_ppc  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"cppInterpreter_ppc.hpp"</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到<code>CppInterpreter</code>继承了<code>AbstractInterpreter</code>，其他就主要是声明了一些方法，不过有一点需要注意，就是增加了条件编译，这里我们选择的是zero架构，所以会将<code>cppInterpreter_zero.hpp</code>代码给插入进来，此处需留意后面会说到这里，先接着往下看它的实现代码</p>
<p>hotspot/src/share/vm/interpreter/cppInterpreter.cpp</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">__</span> <span class="token expression">_masm<span class="token operator">-></span> </span></span>
<span class="token keyword">void</span> CppInterpreter<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_code <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  AbstractInterpreter<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// generate interpreter</span>
  <span class="token punctuation">&#123;</span> ResourceMark rm<span class="token punctuation">;</span>
    TraceTime <span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">"Interpreter generation"</span><span class="token punctuation">,</span> TraceStartupTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> code_size <span class="token operator">=</span> InterpreterCodeSize<span class="token punctuation">;</span>
    <span class="token function">NOT_PRODUCT</span><span class="token punctuation">(</span>code_size <span class="token operator">*=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token comment">// debug uses extra interpreter code space</span>
    _code <span class="token operator">=</span> new <span class="token function">StubQueue</span><span class="token punctuation">(</span>new InterpreterCodeletInterface<span class="token punctuation">,</span> code_size<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                          <span class="token string">"Interpreter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    InterpreterGenerator <span class="token function">g</span><span class="token punctuation">(</span>_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>PrintInterpreter<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Allow c++ interpreter to do one initialization now that switches are set, etc.</span>
  BytecodeInterpreter <span class="token function">start_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>initialize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>JvmtiExport<span class="token operator">::</span><span class="token function">can_post_interpreter_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    BytecodeInterpreter<span class="token operator">::</span><span class="token function">runWithChecks</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    BytecodeInterpreter<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

CppInterpreterGenerator<span class="token operator">::</span><span class="token function">CppInterpreterGenerator</span><span class="token punctuation">(</span>StubQueue<span class="token operator">*</span> _code<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">AbstractInterpreterGenerator</span><span class="token punctuation">(</span>_code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> CppInterpreterGenerator<span class="token operator">::</span><span class="token function">generate_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  AbstractInterpreterGenerator<span class="token operator">::</span><span class="token function">generate_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#123;</span>
<span class="token comment">// 宏定义method_entry方法 </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">method_entry</span><span class="token expression"><span class="token punctuation">(</span>kind<span class="token punctuation">)</span> Interpreter<span class="token operator">::</span>_entry_table<span class="token punctuation">[</span>Interpreter<span class="token operator">::</span>kind<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">generate_method_entry</span><span class="token punctuation">(</span>Interpreter<span class="token operator">::</span>kind<span class="token punctuation">)</span></span></span>
  <span class="token punctuation">&#123;</span> CodeletMark <span class="token function">cm</span><span class="token punctuation">(</span>_masm<span class="token punctuation">,</span> <span class="token string">"(kind = frame_manager)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// all non-native method kinds</span>
    <span class="token comment">// 调用上面的宏</span>
    <span class="token function">method_entry</span><span class="token punctuation">(</span>zerolocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">method_entry</span><span class="token punctuation">(</span>zerolocals_synchronized<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">method_entry</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">method_entry</span><span class="token punctuation">(</span>accessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">method_entry</span><span class="token punctuation">(</span>abstract<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... 省略其他 method_entry(MethodKind)的调用</span>
    <span class="token comment">// 模板方法，留给条件编译的文件代码实现</span>
    <span class="token function">initialize_method_handle_entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">method_entry</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>initialize()</code>：主要做了两件事情
<ul>
<li>定义并初始化<code>InterpreterGenerator g(_code)</code>对象，</li>
<li>定义并初始化<code>BytecodeInterpreter start_msg(BytecodeInterpreter::initialize)</code>对象，然后执行<code>BytecodeInterpreter::run(&amp;start_msg)</code>方法
<ul>
<li><code>BytecodeInterpreter</code> 字节码解释器，顾名思义，它是最终对字节码指令解释执行的解释器</li>
</ul>
</li>
</ul>
</li>
<li><code>generate_all</code>：该方法首先定义了一个<code>method_entry</code>宏，在宏中会调用<code>generate_method_entry</code>方法并传入<code>MethodKind</code>参数，<code>generate_method_entry</code>方法会返回对应的<code>EntryPoint</code>地址，接着以<code>kind</code>参数为索引保存到<code>_entry_table</code>数组属性中，最后调用<code>initialize_method_handle_entries()</code>方法</li>
</ul>
<p>可以看到<code>CppInterpreter</code>中并未实现<code>generate_method_entry</code>和<code>initialize_method_handle_entries</code>两个方法，而且<code>generate_all</code>方法没有被调用，是不是有点纳闷，下面马上就会解答，还记得我们在看到<code>CppInterpreter.hpp</code>文件定义了<code>条件编译</code>的代码吗？由于这里我们查看的是<code>zero</code>架构的代码，所以会插入<code>CppInterpreter_zero.cpp</code>的代码到<code>CppInterpreter</code>中，所以两个谜底在该类中可以揭晓</p>
<ol>
<li>initialize() 为什么没有调用 <code>generate_all</code>方法</li>
<li>generate_method_entry 和 initialize_method_handle_entries 方法的实现是什么</li>
</ol>
<p>让我们带着问题看下面的代码以及解释</p>
<h4 id="cppinterpreter_zero"><a class="markdownIt-Anchor" href="#cppinterpreter_zero"></a> CppInterpreter_zero</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// CppInterpreter中generate_all方法调用的generate_method_entry便是这里实现</span>
address AbstractInterpreterGenerator<span class="token operator">::</span><span class="token function">generate_method_entry</span><span class="token punctuation">(</span>
    AbstractInterpreter<span class="token operator">::</span>MethodKind kind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  address entry_point <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>kind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>zerolocals<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>zerolocals_synchronized<span class="token operator">:</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token comment">// 删除了很多case，jvm会对Math类的计算方法做特殊内联的处理</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_sin<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_cos<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_tan<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_abs<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_log<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_log10<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_sqrt<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_pow<span class="token operator">:</span>
  <span class="token keyword">case</span> Interpreter<span class="token operator">::</span>java_lang_math_exp<span class="token operator">:</span>
    entry_point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>InterpreterGenerator<span class="token operator">*</span><span class="token punctuation">)</span> this<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">generate_math_entry</span><span class="token punctuation">(</span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token function">ShouldNotReachHere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>entry_point <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token comment">// zerolocals 和 zerolocals_synchronized 会进入这里，使用generate_normal_entry方法生成 EntryPoint</span>
    entry_point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>InterpreterGenerator<span class="token operator">*</span><span class="token punctuation">)</span> this<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">generate_normal_entry</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> entry_point<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

address InterpreterGenerator<span class="token operator">::</span><span class="token function">generate_normal_entry</span><span class="token punctuation">(</span>bool synchronized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>synchronized <span class="token operator">==</span> false<span class="token punctuation">,</span> <span class="token string">"should be"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token function">generate_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> CppInterpreter<span class="token operator">::</span>normal_entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 普通java方法执行的入口点</span>
<span class="token keyword">int</span> CppInterpreter<span class="token operator">::</span><span class="token function">normal_entry</span><span class="token punctuation">(</span>Method<span class="token operator">*</span> method<span class="token punctuation">,</span> <span class="token class-name">intptr_t</span> UNUSED<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 当前线程</span>
  JavaThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span> THREAD<span class="token punctuation">;</span>  
  <span class="token comment">// Allocate and initialize our frame.  </span>
  <span class="token comment">// 为该方法分配局部变量表空间并且创建解释器栈帧</span>
  InterpreterFrame <span class="token operator">*</span>frame <span class="token operator">=</span> InterpreterFrame<span class="token operator">::</span><span class="token function">build</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> CHECK_0<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 将栈帧压入当前线程栈</span>
  thread<span class="token operator">-></span><span class="token function">push_zero_frame</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Execute those bytecodes!</span>
  <span class="token comment">// 执行方法中的字节码指令</span>
  <span class="token function">main_loop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token comment">// No deoptimized frames on the stack  </span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>
<span class="token comment">// 创建解释器栈帧</span>
InterpreterFrame <span class="token operator">*</span>InterpreterFrame<span class="token operator">::</span><span class="token function">build</span><span class="token punctuation">(</span>Method<span class="token operator">*</span> <span class="token keyword">const</span> method<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  JavaThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span> THREAD<span class="token punctuation">;</span>
  ZeroStack <span class="token operator">*</span>stack <span class="token operator">=</span> thread<span class="token operator">-></span><span class="token function">zero_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Calculate the size of the frame we'll build, including</span>
  <span class="token comment">// any adjustments to the caller's frame that we'll make.</span>
  <span class="token comment">// 局部变量个数</span>
  <span class="token keyword">int</span> extra_locals  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 监视器锁个数</span>
  <span class="token keyword">int</span> monitor_words <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 局部变量表大小</span>
  <span class="token keyword">int</span> stack_words   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>method<span class="token operator">-></span><span class="token function">is_native</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 计算局部变量大小</span>
    extra_locals <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> method<span class="token operator">-></span><span class="token function">size_of_parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack_words  <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">max_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">is_synchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 如果是同步方法，获取监视器大小</span>
    monitor_words <span class="token operator">=</span> frame<span class="token operator">::</span><span class="token function">interpreter_frame_monitor_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 栈溢出检查</span>
  stack<span class="token operator">-></span><span class="token function">overflow_check</span><span class="token punctuation">(</span>
    extra_locals <span class="token operator">+</span> header_words <span class="token operator">+</span> monitor_words <span class="token operator">+</span> stack_words<span class="token punctuation">,</span> CHECK_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Adjust the caller's stack frame to accomodate any additional</span>
  <span class="token comment">// local variables we have contiguously with our parameters.</span>
  <span class="token comment">// 压栈操作 预分配变量数量个数的空间并初始化为0</span>
  <span class="token comment">// 因为方法参数已经入栈了,所以这里只需要分配局部变量的空间</span>
  <span class="token comment">// 本质是移动sp指针 *(--sp) = value </span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> extra_locals<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    stack<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 局部变量表引用</span>
  <span class="token class-name">intptr_t</span> <span class="token operator">*</span>locals<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">is_native</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// native方法，没有局部变量</span>
    locals <span class="token operator">=</span> stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">size_of_parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
	<span class="token comment">// java方法 max_locals()返回局部变量表的大小</span>
	<span class="token comment">// 计算局部变量起始位置 init_sp - extra_locals + max_locals - 1</span>
    locals <span class="token operator">=</span> stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  stack<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// next_frame, filled in later</span>
  <span class="token comment">// 栈顶指针</span>
  <span class="token class-name">intptr_t</span> <span class="token operator">*</span>fp <span class="token operator">=</span> stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// next_frame_off == 0 ,这里应该是必然相等的，但不知道为啥要断言</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>fp <span class="token operator">-</span> stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> next_frame_off<span class="token punctuation">,</span> <span class="token string">"should be"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置帧类型为解释器帧类型</span>
  stack<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span>INTERPRETER_FRAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// frame_type_off == 1 ,这里应该是必然相等的，但不知道为啥要断言</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>fp <span class="token operator">-</span> stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> frame_type_off<span class="token punctuation">,</span> <span class="token string">"should be"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 解释器状态或者称为解释器上下文对象(我喜欢叫上下文对象，它保存了执行方法所需要的所有信息)</span>
  <span class="token comment">// 在栈上分配一个 InterpreterState 大小的空间</span>
  <span class="token comment">// 这个空间用于存放解释器解释执行方法时所需要的空间（因为解释方法也是方法，也需要分配栈帧空间来存储变量）</span>
  interpreterState istate <span class="token operator">=</span>
    <span class="token punctuation">(</span>interpreterState<span class="token punctuation">)</span> stack<span class="token operator">-></span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>fp <span class="token operator">-</span> stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> istate_off<span class="token punctuation">,</span> <span class="token string">"should be"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置局部变量表指针</span>
  istate<span class="token operator">-></span><span class="token function">set_locals</span><span class="token punctuation">(</span>locals<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 执行的方法对象</span>
  istate<span class="token operator">-></span><span class="token function">set_method</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 关联自己，如果为null说明无效</span>
  istate<span class="token operator">-></span><span class="token function">set_self_link</span><span class="token punctuation">(</span>istate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  istate<span class="token operator">-></span><span class="token function">set_prev_link</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 执行线程</span>
  istate<span class="token operator">-></span><span class="token function">set_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 字节码指针</span>
  istate<span class="token operator">-></span><span class="token function">set_bcp</span><span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">is_native</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">NULL</span> <span class="token operator">:</span> method<span class="token operator">-></span><span class="token function">code_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 方法常量池</span>
  istate<span class="token operator">-></span><span class="token function">set_constants</span><span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">constants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 消息: 表明当前解释器上下文的阶段，method_entry表示方法进入</span>
  istate<span class="token operator">-></span><span class="token function">set_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>method_entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
  istate<span class="token operator">-></span><span class="token function">set_oop_temp</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  istate<span class="token operator">-></span><span class="token function">set_mdx</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  istate<span class="token operator">-></span><span class="token function">set_callee</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// BasicObjectLock 对象指针起始地址（有关synchronized的实现）</span>
  istate<span class="token operator">-></span><span class="token function">set_monitor_base</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BasicObjectLock <span class="token operator">*</span><span class="token punctuation">)</span> stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">is_synchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 如果是同步方法，会分配锁对象的BasicObjectLock空间</span>
    BasicObjectLock <span class="token operator">*</span>monitor <span class="token operator">=</span>
      <span class="token punctuation">(</span>BasicObjectLock <span class="token operator">*</span><span class="token punctuation">)</span> stack<span class="token operator">-></span><span class="token function">alloc</span><span class="token punctuation">(</span>monitor_words <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关联的锁对象</span>
    oop object<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token operator">-></span><span class="token function">is_static</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	  <span class="token comment">// 静态方法锁对象是 class</span>
      object <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">constants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pool_holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">java_mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
	  <span class="token comment">// 实例方法随对象是this</span>
      object <span class="token operator">=</span> <span class="token punctuation">(</span>oop<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>locals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    monitor<span class="token operator">-></span><span class="token function">set_obj</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 设置上下文的栈基地址</span>
  istate<span class="token operator">-></span><span class="token function">set_stack_base</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置上下文的栈顶指针</span>
  istate<span class="token operator">-></span><span class="token function">set_stack</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 局部变量表的大小不为0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stack_words<span class="token punctuation">)</span>
  <span class="token comment">// 在栈上分配局部变量长度大小的空间</span>
    stack<span class="token operator">-></span><span class="token function">alloc</span><span class="token punctuation">(</span>stack_words <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置上下文的栈边界地址</span>
  istate<span class="token operator">-></span><span class="token function">set_stack_limit</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回解释器帧地址</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>InterpreterFrame <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// 为了连贯性将cppInterpreterGenerator_zero的代码也放到这里了</span>
<span class="token comment">// ==========  hotspot/src/cpu/zero/vm/cppInterpreterGenerator_zero.hpp start =====</span>
protected<span class="token operator">:</span>  
 address <span class="token function">generate_entry</span><span class="token punctuation">(</span>address entry_point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
       <span class="token keyword">return</span> <span class="token function">generate_entry_impl</span><span class="token punctuation">(</span><span class="token function">assembler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry_point<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>
 
public<span class="token operator">:</span>  
 <span class="token keyword">static</span> address <span class="token function">generate_entry_impl</span><span class="token punctuation">(</span>MacroAssembler<span class="token operator">*</span> masm<span class="token punctuation">,</span> address entry_point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 当前代码段的当前位置的地址</span>
   <span class="token comment">// src/share/vm/asm/assembler.hpp#pc()</span>
   ZeroEntry <span class="token operator">*</span>entry <span class="token operator">=</span> <span class="token punctuation">(</span>ZeroEntry <span class="token operator">*</span><span class="token punctuation">)</span> masm<span class="token operator">-></span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 计算 ZeroEntry 的大小，移动ZeroEntry个大小的pc()指针，腾出内存区域来存放 ZeroEntry</span>
   masm<span class="token operator">-></span><span class="token function">advance</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ZeroEntry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 关联 entry_point</span>
   entry<span class="token operator">-></span><span class="token function">set_entry_point</span><span class="token punctuation">(</span>entry_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 返回entry的地址  </span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span>address<span class="token punctuation">)</span> entry<span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token comment">// =========== hotspot/src/cpu/zero/vm/cppInterpreterGenerator_zero.hpp end ======</span>

<span class="token comment">// 在CppInterpreter中的initialize方法中会创建 InterpreterGenerator 实例，可以看到，在构造方法中，执行了generate_all()方法</span>
InterpreterGenerator<span class="token operator">::</span><span class="token function">InterpreterGenerator</span><span class="token punctuation">(</span>StubQueue<span class="token operator">*</span> code<span class="token punctuation">)</span>
 <span class="token operator">:</span> <span class="token function">CppInterpreterGenerator</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">generate_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> CppInterpreter<span class="token operator">::</span><span class="token function">main_loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> recurse<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  JavaThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span> THREAD<span class="token punctuation">;</span>
  ZeroStack <span class="token operator">*</span>stack <span class="token operator">=</span> thread<span class="token operator">-></span><span class="token function">zero_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// If we are entering from a deopt we may need to call</span>
  <span class="token comment">// ourself a few times in order to get to our frame.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>recurse<span class="token punctuation">)</span>
    <span class="token function">main_loop</span><span class="token punctuation">(</span>recurse <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>

  InterpreterFrame <span class="token operator">*</span>frame <span class="token operator">=</span> thread<span class="token operator">-></span><span class="token function">top_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">as_interpreter_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  interpreterState istate <span class="token operator">=</span> frame<span class="token operator">-></span><span class="token function">interpreter_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Method<span class="token operator">*</span> method <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">intptr_t</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> result_slots <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// We can set up the frame anchor with everything we want at</span>
    <span class="token comment">// this point as we are thread_in_Java and no safepoints can</span>
    <span class="token comment">// occur until we go to vm mode.  We do have to clear flags</span>
    <span class="token comment">// on return from vm but that is it.</span>
    thread<span class="token operator">-></span><span class="token function">set_last_Java_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Call the interpreter</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>JvmtiExport<span class="token operator">::</span><span class="token function">can_post_interpreter_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      BytecodeInterpreter<span class="token operator">::</span><span class="token function">runWithChecks</span><span class="token punctuation">(</span>istate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      BytecodeInterpreter<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span>istate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fixup_after_potential_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Clear the frame anchor</span>
    thread<span class="token operator">-></span><span class="token function">reset_last_Java_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Examine the message from the interpreter to decide what to do</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>call_method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      Method<span class="token operator">*</span> callee <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">callee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Trim back the stack to put the parameters at the top</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Make the call</span>
      Interpreter<span class="token operator">::</span><span class="token function">invoke_method</span><span class="token punctuation">(</span>callee<span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">callee_entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fixup_after_potential_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Convert the result</span>
      istate<span class="token operator">-></span><span class="token function">set_stack</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Restore the stack</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Resume the interpreter</span>
      istate<span class="token operator">-></span><span class="token function">set_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>method_resume<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>more_monitors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> monitor_words <span class="token operator">=</span> frame<span class="token operator">::</span><span class="token function">interpreter_frame_monitor_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Allocate the space</span>
      stack<span class="token operator">-></span><span class="token function">overflow_check</span><span class="token punctuation">(</span>monitor_words<span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>HAS_PENDING_EXCEPTION<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      stack<span class="token operator">-></span><span class="token function">alloc</span><span class="token punctuation">(</span>monitor_words <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Move the expression stack contents</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span> <span class="token operator">*</span>p <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>

      <span class="token comment">// Move the expression stack pointers</span>
      istate<span class="token operator">-></span><span class="token function">set_stack_limit</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>
      istate<span class="token operator">-></span><span class="token function">set_stack</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>
      istate<span class="token operator">-></span><span class="token function">set_stack_base</span><span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> monitor_words<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Zero the new monitor so the interpreter can find it.</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span>BasicObjectLock <span class="token operator">*</span><span class="token punctuation">)</span> istate<span class="token operator">-></span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">set_obj</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Resume the interpreter</span>
      istate<span class="token operator">-></span><span class="token function">set_msg</span><span class="token punctuation">(</span>BytecodeInterpreter<span class="token operator">::</span>got_monitors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>return_from_method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Copy the result into the caller's frame</span>
      result_slots <span class="token operator">=</span> type2size<span class="token punctuation">[</span>method<span class="token operator">-></span><span class="token function">result_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>result_slots <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> result_slots <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"what?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> istate<span class="token operator">-></span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result_slots<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>throwing_exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>HAS_PENDING_EXCEPTION<span class="token punctuation">,</span> <span class="token string">"should do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>istate<span class="token operator">-></span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> BytecodeInterpreter<span class="token operator">::</span>do_osr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Unwind the current frame</span>
      thread<span class="token operator">-></span><span class="token function">pop_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Remove any extension of the previous frame</span>
      <span class="token keyword">int</span> extra_locals <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> method<span class="token operator">-></span><span class="token function">size_of_parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra_locals<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Jump into the OSR method</span>
      Interpreter<span class="token operator">::</span><span class="token function">invoke_osr</span><span class="token punctuation">(</span>
        method<span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">osr_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> istate<span class="token operator">-></span><span class="token function">osr_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">ShouldNotReachHere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Unwind the current frame</span>
  thread<span class="token operator">-></span><span class="token function">pop_zero_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Pop our local variables</span>
  stack<span class="token operator">-></span><span class="token function">set_sp</span><span class="token punctuation">(</span>stack<span class="token operator">-></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> method<span class="token operator">-></span><span class="token function">max_locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Push our result</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Adjust result to smaller</span>
    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">intptr_t</span> res<span class="token punctuation">;</span>
      jint res_jint<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result_slots <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      BasicType t <span class="token operator">=</span> method<span class="token operator">-></span><span class="token function">result_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_subword_type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res_jint <span class="token operator">=</span> <span class="token punctuation">(</span>jint<span class="token punctuation">)</span><span class="token function">narrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> res_jint<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    stack<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// CC_INTERP</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该类中的其他函数都已经被删掉，只保留核心的280行代码<br />
之前看到<code>CppInterpreter#generate_all</code> 方法会调用<code>generate_method_entry</code>，其实就是调用上面的方法<br />
下面来分析整个执行链做了哪些事情<br />
<code>generate_method_entry</code>：根据传入的<code>MethodKind</code>参数进入对应的分支处理，我们普通的java方法大都是<code>zerolocals</code>，所以会直接break，接着会直接<code>generate_normal_entry</code>方法</p>
<ul>
<li><code>generate_normal_entry</code>：它直接执行<code>generate_entry</code>方法，并将<code>CppInterpreter::normal_entry</code>方法的地址值作为参数进行传递</li>
<li><code>generate_entry</code>：<br />
<code>normal_entry</code>：就做三件事</li>
</ul>
<ul>
<li><code>InterpreterFrame::build</code>：为方法局部变量表分配空间，如果是同步方法会创建BasicLockObject对象来关联锁对象，然后在栈上分配解释器方法栈帧，存放解释器上下文对象以及执行方法时所需的变量</li>
<li><code>Thread::push_zero_frame</code>：将创建的栈帧压入线程栈中</li>
<li><code>main_loop</code>：执行字节码指令的入口
<ul>
<li><code>BytecodeInterpreter::run(istate)</code> 内部调用此方法执行字节码指令，限于篇幅，本章不介绍如何执行的了，有兴趣查看这篇博客<a  href="/posts/1fe4afce.html">字节码指令执行过程 BytecodeInterpreter</a></li>
</ul>
</li>
</ul>
<h3 id="templateinterpreter"><a class="markdownIt-Anchor" href="#templateinterpreter"></a> TemplateInterpreter</h3>
<p>前文说过，初始化解释器时会调用<code>Interpreter::initialize</code>方法，那么这里就不再花费过多的篇幅，让我们直接看<code>TemplateInterpreter::initialize</code>方法做了什么</p>
<blockquote>
<p>注意的是，TemplateInterpreter没有zero架构的实现，因此我这里采取<code>aarch64</code>架构的进行展示，这种逻辑都是一样的，看懂一个就ok了</p>
</blockquote>
<p>hotspot/src/share/vm/interpreter/templateInterpreter.cpp</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 正在使用到的字节码指令分发表，在_normal_table和_safept_table之间切换</span>
DispatchTable TemplateInterpreter<span class="token operator">::</span>_active_table<span class="token punctuation">;</span> 
<span class="token comment">// 正常状态下的字节码指令分发表 只要关注这个即可</span>
DispatchTable TemplateInterpreter<span class="token operator">::</span>_normal_table<span class="token punctuation">;</span>
<span class="token comment">// 安全点状态下的字节码指令分发表</span>
DispatchTable TemplateInterpreter<span class="token operator">::</span>_safept_table<span class="token punctuation">;</span>

<span class="token keyword">void</span> TemplateInterpreter<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_code <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// assertions</span>
  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Bytecodes<span class="token operator">::</span>number_of_codes <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>DispatchTable<span class="token operator">::</span>length<span class="token punctuation">,</span>
         <span class="token string">"dispatch table too small"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  AbstractInterpreter<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 这里是关键，初始化 dispatch table</span>
  TemplateTable<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// generate interpreter</span>
  <span class="token punctuation">&#123;</span> ResourceMark rm<span class="token punctuation">;</span>
    TraceTime <span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">"Interpreter generation"</span><span class="token punctuation">,</span> TraceStartupTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> code_size <span class="token operator">=</span> InterpreterCodeSize<span class="token punctuation">;</span>
    <span class="token function">NOT_PRODUCT</span><span class="token punctuation">(</span>code_size <span class="token operator">*=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token comment">// debug uses extra interpreter code space</span>
    _code <span class="token operator">=</span> new <span class="token function">StubQueue</span><span class="token punctuation">(</span>new InterpreterCodeletInterface<span class="token punctuation">,</span> code_size<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                          <span class="token string">"Interpreter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 解释器生成器：也是生成各种方法类型的 EntryPoint</span>
    InterpreterGenerator <span class="token function">g</span><span class="token punctuation">(</span>_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>PrintInterpreter<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// initialize dispatch table</span>
  <span class="token comment">// 将当前使用的分发表指针 _active_table 指向normal_table </span>
  _active_table <span class="token operator">=</span> _normal_table<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码最核心的就是执行<code>TemplateTable::initialize</code>方法以及初始化解释器生成器<code>InterpreterGenerator g(_code)</code>，接下来直接查看这两个方法内做了哪些事情</p>
<h4 id="templatetable"><a class="markdownIt-Anchor" href="#templatetable"></a> TemplateTable</h4>
<ul>
<li>hotspot/src/share/vm/interpreter/templateTable.cpp</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> TemplateTable<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_is_initialized<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialize table</span>
  TraceTime <span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">"TemplateTable initialization"</span><span class="token punctuation">,</span> TraceStartupTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

  _bs <span class="token operator">=</span> Universe<span class="token operator">::</span><span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">barrier_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// For better readability</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> _    <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span>  ____ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span>  ubcp <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>uses_bcp_bit<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span>  disp <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>does_dispatch_bit<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span>  clvm <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>calls_vm_bit<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span>  iswd <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>wide_bit<span class="token punctuation">;</span>
  <span class="token comment">//                                    interpr. templates</span>
  <span class="token comment">// Java spec bytecodes                ubcp|disp|clvm|iswd  in    out   generator             argument</span>
  <span class="token comment">// 这里就是建立字节码指令和与之对应处理方法的映射关系</span>
  <span class="token comment">// 这里只展示了建立 iload 以及对应处理方法的映射关系 </span>
  <span class="token function">def</span><span class="token punctuation">(</span>Bytecodes<span class="token operator">::</span>_iload               <span class="token punctuation">,</span> ubcp<span class="token operator">|</span>____<span class="token operator">|</span>clvm<span class="token operator">|</span>____<span class="token punctuation">,</span> vtos<span class="token punctuation">,</span> itos<span class="token punctuation">,</span> iload               <span class="token punctuation">,</span>  _           <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 省略了将近300行的字节码指令与模板方法的映射关系定义</span>

  _is_initialized <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
*  Bytecodes::Code code：字节码指令
*  flags: 字节码指令的标识位
*  TosState in：执行该字节码指令时输入的栈顶状态 Top Of Stack State
*  TosState out：执行该字节码指令时输出的栈顶状态 Top Of Stack State
*  gen: 字节码指令处理函数地址
*  arg：字节码指令处理函数参数
*/</span>
<span class="token keyword">void</span> TemplateTable<span class="token operator">::</span><span class="token function">def</span><span class="token punctuation">(</span>Bytecodes<span class="token operator">::</span>Code code<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> TosState in<span class="token punctuation">,</span> TosState out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>gen<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
  <span class="token comment">// should factor out these constants  </span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> ubcp <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>uses_bcp_bit<span class="token punctuation">;</span>  
  <span class="token keyword">const</span> <span class="token keyword">int</span> disp <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>does_dispatch_bit<span class="token punctuation">;</span>  
  <span class="token keyword">const</span> <span class="token keyword">int</span> clvm <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>calls_vm_bit<span class="token punctuation">;</span>  
  <span class="token keyword">const</span> <span class="token keyword">int</span> iswd <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Template<span class="token operator">::</span>wide_bit<span class="token punctuation">;</span>  
  <span class="token comment">// determine which table to use  </span>
  bool is_wide <span class="token operator">=</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> iswd<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
  <span class="token comment">// make sure that wide instructions have a vtos entry point  </span>
  <span class="token comment">// (since they are executed extremely rarely, it doesn't pay out to have an  // extra set of 5 dispatch tables for the wide instructions - for simplicity  // they all go with one table)  assert(in == vtos || !is_wide, "wide instructions have vtos entry point only"); </span>
 <span class="token comment">// </span>
  Template<span class="token operator">*</span> t <span class="token operator">=</span> is_wide <span class="token operator">?</span> <span class="token function">template_for_wide</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">template_for</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token comment">// setup entry  属性初始化</span>
  t<span class="token operator">-></span><span class="token function">initialize</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> in<span class="token punctuation">,</span> out<span class="token punctuation">,</span> gen<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token function">assert</span><span class="token punctuation">(</span>t<span class="token operator">-></span><span class="token function">bytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> code<span class="token punctuation">,</span> <span class="token string">"just checkin'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token comment">// 根据code获取从模板表中获取对应的Template对象</span>
<span class="token keyword">static</span> Template<span class="token operator">*</span> <span class="token function">template_for</span><span class="token punctuation">(</span>Bytecodes<span class="token operator">::</span>Code code<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
	Bytecodes<span class="token operator">::</span><span class="token function">check</span>     <span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>_template_table     <span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 初始化模板对象属性值</span>
<span class="token keyword">void</span> Template<span class="token operator">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span> TosState tos_in<span class="token punctuation">,</span> TosState tos_out<span class="token punctuation">,</span> generator gen<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  _flags   <span class="token operator">=</span> flags<span class="token punctuation">;</span>
  _tos_in  <span class="token operator">=</span> tos_in<span class="token punctuation">;</span>
  _tos_out <span class="token operator">=</span> tos_out<span class="token punctuation">;</span>
  _gen     <span class="token operator">=</span> gen<span class="token punctuation">;</span>
  _arg     <span class="token operator">=</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到在<code>def</code>方法中会传入字节码指令处理函数<code>gen</code>的地址，而根据不同架构函数的实现也会有所不同，所以<code>TemplateTable</code>有不同的架构实现，我们看<code>aarch64</code>平台下的<code>TemplateTable</code>的实现<br />
hotspot/src/cpu/aarch64/vm/templateTable_aarch64.cpp</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> TemplateTable<span class="token operator">::</span><span class="token function">iload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  <span class="token function">transition</span><span class="token punctuation">(</span>vtos<span class="token punctuation">,</span> itos<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>RewriteFrequentPairs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token comment">// 删掉了在某些case下对iload重写优化的逻辑</span>
  <span class="token punctuation">&#125;</span>  
  <span class="token comment">// do iload, get the local value into tos  </span>
  <span class="token function">locals_index</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  __ <span class="token function">ldr</span><span class="token punctuation">(</span>r0<span class="token punctuation">,</span> <span class="token function">iaddress</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>iload()</code>：可以看到对<code>iload</code>指令的处理就是将局部变量表的索引给r1，然后从局部变量表加载int类型的值到寄存器r0中</li>
</ul>
<p>初始化<code>InterpreterGenerator</code> 时会生成各种类型方法的<code>EntryPoint</code><br />
hotspot/src/cpu/aarch64/vm/templateInterpreter_aarch64.cpp</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">  
InterpreterGenerator<span class="token operator">::</span><span class="token function">InterpreterGenerator</span><span class="token punctuation">(</span>StubQueue<span class="token operator">*</span> code<span class="token punctuation">)</span>  
  <span class="token operator">:</span> <span class="token function">TemplateInterpreterGenerator</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
   <span class="token function">generate_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// down here so it can be "virtual"  </span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> TemplateInterpreterGenerator<span class="token operator">::</span><span class="token function">generate_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  AbstractInterpreterGenerator<span class="token operator">::</span><span class="token function">generate_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 宏定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">method_entry</span><span class="token expression"><span class="token punctuation">(</span>kind<span class="token punctuation">)</span>                                                                    </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">&#123;</span> CodeletMark <span class="token function">cm</span><span class="token punctuation">(</span>_masm<span class="token punctuation">,</span> </span><span class="token string">"method entry point (kind = "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">kind</span> </span></span><span class="token string">")"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span>                    </span><span class="token punctuation">\</span>
    <span class="token expression">Interpreter<span class="token operator">::</span>_entry_table<span class="token punctuation">[</span>Interpreter<span class="token operator">::</span>kind<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">generate_method_entry</span><span class="token punctuation">(</span>Interpreter<span class="token operator">::</span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">&#125;</span></span></span>

  <span class="token comment">// all non-native method kinds</span>
  <span class="token function">method_entry</span><span class="token punctuation">(</span>zerolocals<span class="token punctuation">)</span>
  <span class="token function">method_entry</span><span class="token punctuation">(</span>zerolocals_synchronized<span class="token punctuation">)</span>
  <span class="token comment">// 动态方法支持</span>
  <span class="token function">initialize_method_handle_entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// all native method kinds (must be one contiguous block)</span>
  Interpreter<span class="token operator">::</span>_native_entry_begin <span class="token operator">=</span> Interpreter<span class="token operator">::</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">code_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">method_entry</span><span class="token punctuation">(</span>native<span class="token punctuation">)</span>
  <span class="token function">method_entry</span><span class="token punctuation">(</span>native_synchronized<span class="token punctuation">)</span>
  Interpreter<span class="token operator">::</span>_native_entry_end <span class="token operator">=</span> Interpreter<span class="token operator">::</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">code_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">method_entry</span></span>
  <span class="token comment">// Bytecodes</span>
  <span class="token function">set_entry_points_for_all_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">set_safepoints_for_all_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可以看到也是在<code>InterpreterGenerator</code>构造方法中调用了<code>generate_all</code>函数来给各种类型的方法生成并关联 EntryPoint
<ul>
<li>具体逻辑就不概述了，思路一样</li>
</ul>
</li>
</ul>
<p>这里直接展示生成<code>zerolocals</code>类型方法的<code>EntryPoint</code>代码，但是不会做注释(汇编看不懂 😦 ，只能靠推测，为了不误导大家，只是贴出源代码作为了解  )</p>
<h4 id="interpretergenerator"><a class="markdownIt-Anchor" href="#interpretergenerator"></a> InterpreterGenerator</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">address InterpreterGenerator<span class="token operator">::</span><span class="token function">generate_normal_entry</span><span class="token punctuation">(</span>bool synchronized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// determine code generation flags</span>
  bool inc_counter  <span class="token operator">=</span> UseCompiler <span class="token operator">||</span> CountCompiledCalls<span class="token punctuation">;</span>

  <span class="token comment">// rscratch1: sender sp</span>
  address entry_point <span class="token operator">=</span> __ <span class="token function">pc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> Address <span class="token function">constMethod</span><span class="token punctuation">(</span>rmethod<span class="token punctuation">,</span> Method<span class="token operator">::</span><span class="token function">const_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Address <span class="token function">access_flags</span><span class="token punctuation">(</span>rmethod<span class="token punctuation">,</span> Method<span class="token operator">::</span><span class="token function">access_flags_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Address <span class="token function">size_of_parameters</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span>
                                   ConstMethod<span class="token operator">::</span><span class="token function">size_of_parameters_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Address <span class="token function">size_of_locals</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span> ConstMethod<span class="token operator">::</span><span class="token function">size_of_locals_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// get parameter size (always needed)</span>
  <span class="token comment">// need to load the const method first</span>
  __ <span class="token function">ldr</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span> constMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">load_unsigned_short</span><span class="token punctuation">(</span>r2<span class="token punctuation">,</span> size_of_parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// r2: size of parameters</span>

  __ <span class="token function">load_unsigned_short</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span> size_of_locals<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get size of locals in words</span>
  __ <span class="token function">sub</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span> r3<span class="token punctuation">,</span> r2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// r3 = no. of additional locals</span>

  <span class="token comment">// see if we've got enough room on the stack for locals plus overhead.</span>
  <span class="token function">generate_stack_overflow_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// compute beginning of parameters (rlocals)</span>
  __ <span class="token function">add</span><span class="token punctuation">(</span>rlocals<span class="token punctuation">,</span> esp<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> ext<span class="token operator">::</span>uxtx<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">sub</span><span class="token punctuation">(</span>rlocals<span class="token punctuation">,</span> rlocals<span class="token punctuation">,</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Make room for locals</span>
  __ <span class="token function">sub</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> esp<span class="token punctuation">,</span> r3<span class="token punctuation">,</span> ext<span class="token operator">::</span>uxtx<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">andr</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> rscratch1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// r3 - # of additional locals</span>
  <span class="token comment">// allocate space for locals</span>
  <span class="token comment">// explicitly initialize locals</span>
  <span class="token punctuation">&#123;</span>
    Label exit<span class="token punctuation">,</span> loop<span class="token punctuation">;</span>
    __ <span class="token function">ands</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> r3<span class="token punctuation">,</span> r3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">br</span><span class="token punctuation">(</span>Assembler<span class="token operator">::</span>LE<span class="token punctuation">,</span> exit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// do nothing if r3 &lt;= 0</span>
    __ <span class="token function">bind</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">str</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>__ <span class="token function">post</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">sub</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span> r3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// until everything initialized</span>
    __ <span class="token function">cbnz</span><span class="token punctuation">(</span>r3<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">bind</span><span class="token punctuation">(</span>exit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// And the base dispatch table</span>
  __ <span class="token function">get_dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// initialize fixed part of activation frame</span>
  <span class="token function">generate_fixed_frame</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// make sure method is not native &amp; not abstract</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">ASSERT</span></span>
  __ <span class="token function">ldrw</span><span class="token punctuation">(</span>r0<span class="token punctuation">,</span> access_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#123;</span>
    Label L<span class="token punctuation">;</span>
    __ <span class="token function">tst</span><span class="token punctuation">(</span>r0<span class="token punctuation">,</span> JVM_ACC_NATIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">br</span><span class="token punctuation">(</span>Assembler<span class="token operator">::</span>EQ<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">"tried to execute native method as non-native"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">bind</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#123;</span>
    Label L<span class="token punctuation">;</span>
    __ <span class="token function">tst</span><span class="token punctuation">(</span>r0<span class="token punctuation">,</span> JVM_ACC_ABSTRACT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">br</span><span class="token punctuation">(</span>Assembler<span class="token operator">::</span>EQ<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">"tried to execute abstract method in interpreter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">bind</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

  <span class="token comment">// Since at this point in the method invocation the exception</span>
  <span class="token comment">// handler would try to exit the monitor of synchronized methods</span>
  <span class="token comment">// which hasn't been entered yet, we set the thread local variable</span>
  <span class="token comment">// _do_not_unlock_if_synchronized to true. The remove_activation</span>
  <span class="token comment">// will check this flag.</span>

   <span class="token keyword">const</span> Address <span class="token function">do_not_unlock_if_synchronized</span><span class="token punctuation">(</span>rthread<span class="token punctuation">,</span>
        <span class="token function">in_bytes</span><span class="token punctuation">(</span>JavaThread<span class="token operator">::</span><span class="token function">do_not_unlock_if_synchronized_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">mov</span><span class="token punctuation">(</span>rscratch2<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">strb</span><span class="token punctuation">(</span>rscratch2<span class="token punctuation">,</span> do_not_unlock_if_synchronized<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// increment invocation count &amp; check for overflow</span>
  Label invocation_counter_overflow<span class="token punctuation">;</span>
  Label profile_method<span class="token punctuation">;</span>
  Label profile_method_continue<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inc_counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">generate_counter_incr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>invocation_counter_overflow<span class="token punctuation">,</span>
                          <span class="token operator">&amp;</span>profile_method<span class="token punctuation">,</span>
                          <span class="token operator">&amp;</span>profile_method_continue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ProfileInterpreter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      __ <span class="token function">bind</span><span class="token punctuation">(</span>profile_method_continue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  Label continue_after_compile<span class="token punctuation">;</span>
  __ <span class="token function">bind</span><span class="token punctuation">(</span>continue_after_compile<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">bang_stack_shadow_pages</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// reset the _do_not_unlock_if_synchronized flag</span>
  __ <span class="token function">strb</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> do_not_unlock_if_synchronized<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// check for synchronized methods</span>
  <span class="token comment">// Must happen AFTER invocation_counter check and stack overflow check,</span>
  <span class="token comment">// so method is not locked if overflows.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>synchronized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Allocate monitor and lock method</span>
    <span class="token function">lock_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// no synchronization necessary</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">ASSERT</span></span>
    <span class="token punctuation">&#123;</span>
      Label L<span class="token punctuation">;</span>
      __ <span class="token function">ldrw</span><span class="token punctuation">(</span>r0<span class="token punctuation">,</span> access_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __ <span class="token function">tst</span><span class="token punctuation">(</span>r0<span class="token punctuation">,</span> JVM_ACC_SYNCHRONIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __ <span class="token function">br</span><span class="token punctuation">(</span>Assembler<span class="token operator">::</span>EQ<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __ <span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">"method needs synchronization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      __ <span class="token function">bind</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// start execution</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">ASSERT</span></span>
  <span class="token punctuation">&#123;</span>
    Label L<span class="token punctuation">;</span>
     <span class="token keyword">const</span> Address <span class="token function">monitor_block_top</span> <span class="token punctuation">(</span>rfp<span class="token punctuation">,</span>
                 frame<span class="token operator">::</span>interpreter_frame_monitor_block_top_offset <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">ldr</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> monitor_block_top<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">cmp</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span> rscratch1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">br</span><span class="token punctuation">(</span>Assembler<span class="token operator">::</span>EQ<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">"broken stack frame setup in interpreter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">bind</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

  <span class="token comment">// jvmti support</span>
  __ <span class="token function">notify_method_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  __ <span class="token function">dispatch_next</span><span class="token punctuation">(</span>vtos<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// invocation counter overflow</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inc_counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ProfileInterpreter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// We have decided to profile this method in the interpreter</span>
      __ <span class="token function">bind</span><span class="token punctuation">(</span>profile_method<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __ <span class="token function">call_VM</span><span class="token punctuation">(</span>noreg<span class="token punctuation">,</span> <span class="token function">CAST_FROM_FN_PTR</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> InterpreterRuntime<span class="token operator">::</span>profile_method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      __ <span class="token function">set_method_data_pointer_for_bcp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// don't think we need this</span>
      __ <span class="token function">get_method</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __ <span class="token function">b</span><span class="token punctuation">(</span>profile_method_continue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Handle overflow of counter and compile method</span>
    __ <span class="token function">bind</span><span class="token punctuation">(</span>invocation_counter_overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">generate_counter_overflow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>continue_after_compile<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> entry_point<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码中在48行处调用了<code>generate_fixed_frame</code>，为解释器方法生成栈帧，并且会在栈上存放后续方法执行所需要的常量池，以及分配目标执行方法内部的局部变量所使用到的空间</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> TemplateInterpreterGenerator<span class="token operator">::</span><span class="token function">generate_fixed_frame</span><span class="token punctuation">(</span>bool native_call<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// initialize fixed part of activation frame</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>native_call<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    __ <span class="token function">sub</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> <span class="token number">12</span> <span class="token operator">*</span>  wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">mov</span><span class="token punctuation">(</span>rbcp<span class="token punctuation">,</span> zr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">stp</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span> zr<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>__ <span class="token function">pre</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// add 2 zero-initialized slots for native calls</span>
    __ <span class="token function">stp</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> zr<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    __ <span class="token function">sub</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span>  wordSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">ldr</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rmethod<span class="token punctuation">,</span> Method<span class="token operator">::</span><span class="token function">const_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// get ConstMethod</span>
    __ <span class="token function">add</span><span class="token punctuation">(</span>rbcp<span class="token punctuation">,</span> rscratch1<span class="token punctuation">,</span> <span class="token function">in_bytes</span><span class="token punctuation">(</span>ConstMethod<span class="token operator">::</span><span class="token function">codes_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get codebase</span>
    __ <span class="token function">stp</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span> rbcp<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>__ <span class="token function">pre</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>ProfileInterpreter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Label method_data_continue<span class="token punctuation">;</span>
    __ <span class="token function">ldr</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rmethod<span class="token punctuation">,</span> Method<span class="token operator">::</span><span class="token function">method_data_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">cbz</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> method_data_continue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">lea</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> <span class="token function">in_bytes</span><span class="token punctuation">(</span>MethodData<span class="token operator">::</span><span class="token function">data_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">bind</span><span class="token punctuation">(</span>method_data_continue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">stp</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> rmethod<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// save Method* and mdp (method data pointer)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    __ <span class="token function">stp</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> rmethod<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// save Method* (no mdp)</span>
  <span class="token punctuation">&#125;</span>

  __ <span class="token function">ldr</span><span class="token punctuation">(</span>rcpool<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rmethod<span class="token punctuation">,</span> Method<span class="token operator">::</span><span class="token function">const_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">ldr</span><span class="token punctuation">(</span>rcpool<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rcpool<span class="token punctuation">,</span> ConstMethod<span class="token operator">::</span><span class="token function">constants_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">ldr</span><span class="token punctuation">(</span>rcpool<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rcpool<span class="token punctuation">,</span> ConstantPool<span class="token operator">::</span><span class="token function">cache_offset_in_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">stp</span><span class="token punctuation">(</span>rlocals<span class="token punctuation">,</span> rcpool<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  __ <span class="token function">stp</span><span class="token punctuation">(</span>rfp<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __ <span class="token function">lea</span><span class="token punctuation">(</span>rfp<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// set sender sp</span>
  <span class="token comment">// leave last_sp as null</span>
  __ <span class="token function">stp</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> r13<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token number">6</span> <span class="token operator">*</span> wordSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Move SP out of the way</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> native_call<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    __ <span class="token function">ldr</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rmethod<span class="token punctuation">,</span> Method<span class="token operator">::</span><span class="token function">const_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// </span>
    __ <span class="token function">ldrh</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> <span class="token function">Address</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> ConstMethod<span class="token operator">::</span><span class="token function">max_stack_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">add</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> rscratch1<span class="token punctuation">,</span> frame<span class="token operator">::</span><span class="token function">interpreter_frame_monitor_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
           <span class="token operator">+</span> <span class="token punctuation">(</span>EnableInvokeDynamic <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">sub</span><span class="token punctuation">(</span>rscratch1<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> rscratch1<span class="token punctuation">,</span> ext<span class="token operator">::</span>uxtw<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __ <span class="token function">andr</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> rscratch1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr />
<p>本文到此结束，可能有诸多纰漏之处还请指正</p>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>hotspot</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Liunx Futex</title>
    <url>/posts/991d833e.html</url>
    <content><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2>
<p>写这篇的文章的原因是因为在研究 java 的重量级锁中用到了 <code>pthred_mutex_t</code>作为互斥锁，<code>pthred_mutex_t</code>中加锁函数<code>pthread_mutex_lock</code>当竞争锁失败时便会通过系统调用<code>futex_wait</code>将当前线程阻塞等待到其内部的条件变量<code>__lock</code>上，设置线程的状态为<code>INTERRUPTABLE</code>，当使用解锁函数<code>pthread_mutex_unlock</code>时便会将<code>__lock</code>的值改变为0，然后通过系统调用<code>futex_wake</code>唤醒阻塞等待在条件变量<code>__lock</code>上的线程，将线程的状态改为可运行状态，当然，上面的流程是看完<code>futex</code>的源码后总结的一个大概的流程，为了搞清楚<code>pthread_mutex_lock</code>和<code>pthread_mutex_unlock</code>做了什么，我只能深究源码，解答心中疑惑</p>
<h2 id="锁"><a class="markdownIt-Anchor" href="#锁"></a> 锁</h2>
<p>在介绍<code>futex</code>之前，我想先在java层面去介绍为什么不在用户态去实现自己的锁机制，这样就能够避免由于系统调用导致线程上下文切换的开销，因为我在深究源码的过程中也出现了类似的疑惑，搜寻了很多博客以及AI但是并未给出我想要的回答，当看懂了<code>futex</code>的源码后我才懂了为什么不这样做，接下来让我们先尝试在java层面设计一个自己的锁</p>
<h3 id="java-lock"><a class="markdownIt-Anchor" href="#java-lock"></a> Java Lock</h3>
<p>我们可以想一下常见锁的机制</p>
<ul>
<li><code>lock</code>和<code>unlock</code>：如果加锁成功就返回，如果失败就要能够阻塞等待，不能一直自旋等待锁的释放，当持有锁的线程释放后就需要唤醒在锁上阻塞等待的线程去竞争锁</li>
<li><code>wait</code>和<code>notify</code>：当持有锁的线程执行过程中发现某个条件不满足时，就应该主动的放弃锁的持有权，并且由于线程是因为条件不满足释放锁的，所以当条件不满足之前都不应该拥有竞争锁的权力，直到条件满足时竞争到锁后再向下执行。当某个线程获得锁后，改变条件的状态后便需要将正在该条件上阻塞等待的线程提升为也能够正常参与竞争锁的状态</li>
</ul>
<p>根据上面的机制，因此就有了如下的简单实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lock</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 锁变量，0无锁 1有锁</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 锁变量，0无锁 1有锁</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> entryLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 锁变量，0无锁 1有锁</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> waitLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 锁的持有者</span>
	<span class="token keyword">private</span> <span class="token class-name">Thread</span> owner<span class="token punctuation">;</span>
	<span class="token comment">// 重入次数</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> recurrences<span class="token punctuation">;</span>
	<span class="token comment">// 进入到该锁中竞争阻塞的线程队列</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> entryList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 等待条件唤醒的等待队列</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> waitList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>owner <span class="token operator">==</span> current<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				recurrences<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				owner <span class="token operator">=</span> current<span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token function">queueSpinLock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
			entryList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">queueUnlock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">wait</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>owner <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>recurrences <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			recurrences<span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		owner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		lock<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 不满足时，应该阻塞等待</span>
		<span class="token function">queueSpinLock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Thread</span> waitLockThread <span class="token operator">=</span> entryList<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">queueUnlock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		entryLock<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>waitLockThread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token function">wake</span><span class="token punctuation">(</span>waitLockThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// Object的wait方法不可重写</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wait0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>owner <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token function">queueSpinLock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Thread</span> wokenThread <span class="token operator">=</span> entryList<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">queueUnlock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">queueSpinLock</span><span class="token punctuation">(</span>waitLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		waitList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">queueUnlock</span><span class="token punctuation">(</span>waitLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		owner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		lock<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">wake</span><span class="token punctuation">(</span>wokenThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">wait</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">// Object的notify方法不可重写</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>owner <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">queueSpinLock</span><span class="token punctuation">(</span>waitLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Thread</span> wokenThread <span class="token operator">=</span> waitList<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">queueUnlock</span><span class="token punctuation">(</span>waitLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>wokenThread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token function">queueSpinLock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
			entryList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>wokenThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">queueUnlock</span><span class="token punctuation">(</span>entryLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token comment">// 线程等待，这里的实现在java层面没有,也就是我本小节想讲的地方</span>
		<span class="token comment">// 通常使用 LockSupport.park(); 来将当前线程状态置为不可调度状态</span>
		<span class="token comment">// java层面是WAITING，os层面是INTERRUPTABLE</span>
		<span class="token comment">// LockSupport.park();</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">wake</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token comment">// 线程唤醒，这里的实现java层面没有</span>
		<span class="token comment">// 通常使用LockSupport.unpark(waitLockThread),将线程状态置为可运行状态</span>
		<span class="token comment">// java层面是RUNNABLE，os层面是RUNNING</span>
		<span class="token comment">// LockSupport.unpark(t);</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">queueSpinLock</span><span class="token punctuation">(</span><span class="token class-name">AtomicBoolean</span> lock<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">queueUnlock</span><span class="token punctuation">(</span><span class="token class-name">AtomicBoolean</span> lock<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		lock<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码是一个简单的锁的实现，将<code>wait(Thread t)</code>和<code>wake(Thread t)</code>中分别使用的<code>LockSupport</code>工具类中的<code>park</code>和<code>unpark</code>方法的注释打开是能够正常工作的，但我这里却不想用该类中的方法，并且也在注释说明了原因，因为该方法底层会进行系统调用从而会导致线程上下文切换，本小节开头就说想在用户态实现线程之间的通信机制，避免系统调用的开销，让我们来想想在用户态怎么才能够做到</p>
<ul>
<li>要想当锁条件不满足时让出cpu的执行权但又避免系统调用的开销，那么用户态就必须能够调度线程的运行，这显然是不安全的，恶意进程可以永远只调度自己的线程，而导致其他线程饥饿，就这一点就足以否决这种优化效率的提案</li>
</ul>
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<p>在Liunx 内核中提供了一种快速检查锁冲突的系统调用，称为<code>Fast Userspace Mutex</code> 简称 <code>Futex</code>，它避免了当锁未冲突时也需要陷入到内核态完成加锁操作再切换到用户态的开销，只有当锁冲突时，竞争锁的线程才需要陷入内核态去阻塞等待锁的释放</p>
<p><code>futex</code>提供了两个关键的方法，从而支持了当用户态检测到锁冲突时可以阻塞竞争锁的线程，当锁被持有者释放了再唤醒阻塞等待的线程，这两个方法分别是：</p>
<ul>
<li><code>futex_wait(u32 __user *uaddr, unsigned int flags, u32 val, ktime_t *abs_time, u32 bitset)</code> <a href="https://elixir.bootlin.com/linux/v4.0/source/kernel/futex.c#L2164">源码链接</a>
<ul>
<li><code>*uaddr</code>：指向用户空间锁变量地址的指针</li>
<li><code>flags</code>：锁标志位
<ul>
<li><code>FLAGS_SHARED = 0x01</code>：是否多个进程共享 <code>0: PRIVATE 1: SHARED</code></li>
<li><code>FLAGS_CLOCKRT = 0x02</code>：是否采用实时时钟来为其设置超时时间</li>
<li><code>FLAGS_HAS_TIMEOUT = 0x04</code>：是否需要超时唤醒</li>
</ul>
</li>
<li><code>val</code>：锁变量值，如果和<code>*uaddr</code>值相等就阻塞等待，不相等说明有其他进程已经修改了该值，那么会直接返回</li>
<li><code>abs_time</code>：设置超时唤醒的绝对时间</li>
<li><code>bitset</code>：设置位掩码，只有当<code>*uaddr</code>指向的值的某位发生变更才被唤醒</li>
</ul>
</li>
<li><code>futex_wake(u32 __user *uaddr, unsigned int flags, int nr_wake, u32 bitset)</code> <a href="https://elixir.bootlin.com/linux/v4.0/source/kernel/futex.c#L1214">源码链接</a>
<ul>
<li><code>*uaddr</code>：唤醒在指定用户空间地址指针上阻塞等待的线程</li>
<li><code>flags</code>：
<ul>
<li><code>FLAGS_SHARED = 0x01</code>：是否多个进程共享 <code>0: PRIVATE 1: SHARED</code></li>
</ul>
</li>
<li><code>nr_wake</code>：唤醒指定数量的线程</li>
<li><code>bitset</code>：用于比较在调用<code>futex_wait</code>传入的<code>bitset</code>的值是否发生变化，如果没有发生变化则不唤醒</li>
</ul>
</li>
</ul>
<p>上面介绍了两个函数以及参数的作用，接下来让我们去探究源码，看看是如何实现的</p>
<blockquote>
<p>在线源码 <a href="https://elixir.bootlin.com/linux/v4.0/source/kernel/futex.c#L2053">futex.c - kernel/futex.c - Linux source code v4.0 - Bootlin Elixir Cross Referencer</a></p>
</blockquote>
<h2 id="futex_wait-源码解析"><a class="markdownIt-Anchor" href="#futex_wait-源码解析"></a> futex_wait 源码解析</h2>
<h3 id="源码流程时序图"><a class="markdownIt-Anchor" href="#源码流程时序图"></a> 源码流程时序图</h3>
<img src="/posts/991d833e/futex_wait.svg" class="" title="futex_wait">
<p>上面是<code>futex_wait</code>的执行时序，直观了解一下整个的执行过程，下面深究源码，让我们看看互斥锁的底层实现</p>
<blockquote>
<p>注意，本文所说的进程语义其实就是线程，在<code>liunx</code>中线程和进程共用一个结构体<code>task_struct</code>，通过内部的两个属性<code>pid</code>和<code>tgid</code>来区分线程与进程<br />
如果 <code>pid == tgid</code>是进程，否则就是线程</p>
</blockquote>
<h3 id="futex_wait"><a class="markdownIt-Anchor" href="#futex_wait"></a> futex_wait</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">futex_wait</span><span class="token punctuation">(</span>u32 __user <span class="token operator">*</span>uaddr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> u32 val<span class="token punctuation">,</span>
		      <span class="token class-name">ktime_t</span> <span class="token operator">*</span>abs_time<span class="token punctuation">,</span> u32 bitset<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// 如果设置了等待时间，将由定时器唤醒该等待的进程</span>
	<span class="token keyword">struct</span> <span class="token class-name">hrtimer_sleeper</span> timeout<span class="token punctuation">,</span> <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">restart_block</span> <span class="token operator">*</span>restart<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span>hb<span class="token punctuation">;</span>
	<span class="token comment">// 初始化 futex_q , futex_q 是等待队列中的元素类型</span>
	<span class="token keyword">struct</span> <span class="token class-name">futex_q</span> q <span class="token operator">=</span> futex_q_init<span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">;</span>
	<span class="token comment">// 通常是 0xffffffff，在调用futex_wake时会判断uaddr的值的bit mask 是否发生改变从而决定是否唤醒</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bitset<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
	q<span class="token punctuation">.</span>bitset <span class="token operator">=</span> bitset<span class="token punctuation">;</span>
	<span class="token comment">// 设置了超时时间，当达到了超时时间会由 hrtimer来重新调度线程</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>abs_time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		to <span class="token operator">=</span> <span class="token operator">&amp;</span>timeout<span class="token punctuation">;</span>
		<span class="token function">hrtimer_init_on_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>to<span class="token operator">-></span>timer<span class="token punctuation">,</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> FLAGS_CLOCKRT<span class="token punctuation">)</span> <span class="token operator">?</span>
				      CLOCK_REALTIME <span class="token operator">:</span> CLOCK_MONOTONIC<span class="token punctuation">,</span>
				      HRTIMER_MODE_ABS<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">hrtimer_init_sleeper</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">hrtimer_set_expires_range_ns</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>to<span class="token operator">-></span>timer<span class="token punctuation">,</span> <span class="token operator">*</span>abs_time<span class="token punctuation">,</span>
					     current<span class="token operator">-></span>timer_slack_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

retry<span class="token operator">:</span>
	<span class="token comment">/*
	 * Prepare to wait on uaddr. On success, holds hb lock and increments
	 * q.key refs.
	 */</span>
	<span class="token comment">// 主要是做前置操作</span>
	<span class="token comment">// 1. 对futex_q所要存放的等待队列加锁</span>
	<span class="token comment">// 2. 将存放的等待队列的指针赋值给 hb 地址</span>
	<span class="token comment">// 3. 判断uaddr的值是否等于val，如果等于，那么说明没有其他进程对该地址的值做更改,返回0，否则非0</span>
	ret <span class="token operator">=</span> <span class="token function">futex_wait_setup</span><span class="token punctuation">(</span>uaddr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
		<span class="token comment">// 非0，直接跳转到out</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	<span class="token comment">/* queue_me and wait for wakeup, timeout, or a signal. */</span>
	<span class="token comment">// 将 futex_q 入队，并且将当前进程设置为不可调度状态，然后会重新开始调度进程</span>
	<span class="token function">futex_wait_queue_me</span><span class="token punctuation">(</span>hb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 执行到这里就是被唤醒了</span>
	<span class="token comment">/* If we were woken (and unqueued), we succeeded, whatever. */</span>
	ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">/* unqueue_me() drops q.key ref */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">unqueue_me</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// 是被其他进程唤醒的，直接跳转到 out</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	
	<span class="token comment">// 可能是被定时器给唤醒的</span>
	ret <span class="token operator">=</span> <span class="token operator">-</span>ETIMEDOUT<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>to<span class="token operator">-></span>task<span class="token punctuation">)</span>
		<span class="token comment">// 设置了定时器，并且定时任务已经执行了，那么就是被定时任务唤醒的，直接调换到out</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>

	<span class="token comment">/*
	 * We expect signal_pending(current), but we might be the
	 * victim of a spurious wakeup as well.
	 */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">signal_pending</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// 不是被信号唤醒的,说明是虚假唤醒，重新阻塞等待</span>
		<span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
	<span class="token comment">// 是被信号唤醒的</span>
	ret <span class="token operator">=</span> <span class="token operator">-</span>ERESTARTSYS<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>abs_time<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	<span class="token comment">// 和信号有关，但不太了解</span>
	restart <span class="token operator">=</span> <span class="token operator">&amp;</span>current<span class="token operator">-></span>restart_block<span class="token punctuation">;</span>
	restart<span class="token operator">-></span>fn <span class="token operator">=</span> futex_wait_restart<span class="token punctuation">;</span>
	restart<span class="token operator">-></span>futex<span class="token punctuation">.</span>uaddr <span class="token operator">=</span> uaddr<span class="token punctuation">;</span>
	restart<span class="token operator">-></span>futex<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
	restart<span class="token operator">-></span>futex<span class="token punctuation">.</span>time <span class="token operator">=</span> abs_time<span class="token operator">-></span>tv64<span class="token punctuation">;</span>
	restart<span class="token operator">-></span>futex<span class="token punctuation">.</span>bitset <span class="token operator">=</span> bitset<span class="token punctuation">;</span>
	restart<span class="token operator">-></span>futex<span class="token punctuation">.</span>flags <span class="token operator">=</span> flags <span class="token operator">|</span> FLAGS_HAS_TIMEOUT<span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token operator">-</span>ERESTART_RESTARTBLOCK<span class="token punctuation">;</span>

out<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 设置了定时任务，将其取消</span>
		<span class="token function">hrtimer_cancel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>to<span class="token operator">-></span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">destroy_hrtimer_on_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>to<span class="token operator">-></span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 返回执行结果</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的注释已经都解释了每行代码的用途，这里总结一下</p>
<ol>
<li>如果设置了超时唤醒，那么就会为其设置一个定时器，当超过指定的时间后定时器就会唤醒该进程</li>
<li>执行<code>futex_wait_setup</code>方法，完成将当前进程所关联的<code>futex_q</code>对象插入到等待队列之前的初始化工作，并且判断它的返回值，如果是非0，那么说明<code>uaddr</code>地址的值已经被更改了，直接返回退出执行</li>
<li>执行<code>futex_wait_queue_me</code>方法，执行真正的插入等待队列的操作并且将当前进程设置为不可调度的状态，然后执行调度进程<code>schedule</code>函数</li>
<li>被唤醒了，就检查是什么原因唤醒的当前进程，并且返回对应的返回值，如果是0就说明是被其他进程调用<code>futex_wake</code>唤醒的</li>
</ol>
<p>ok，总结了一下流程，接下来让我们具体的看下这些方法做了什么操作</p>
<h3 id="futex_wait_setup"><a class="markdownIt-Anchor" href="#futex_wait_setup"></a> futex_wait_setup</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">futex_wait_setup</span><span class="token punctuation">(</span>u32 __user <span class="token operator">*</span>uaddr<span class="token punctuation">,</span> u32 val<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
			   <span class="token keyword">struct</span> <span class="token class-name">futex_q</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span><span class="token operator">*</span>hb<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	u32 uval<span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">;</span>

	<span class="token comment">/*
	 * Access the page AFTER the hash-bucket is locked.
	 * Order is important:
	 *
	 *   Userspace waiter: val = var; if (cond(val)) futex_wait(&amp;var, val);
	 *   Userspace waker:  if (cond(var)) &#123; var = new; futex_wake(&amp;var); &#125;
	 *
	 * The basic logical guarantee of a futex is that it blocks ONLY
	 * if cond(var) is known to be true at the time of blocking, for
	 * any cond.  If we locked the hash-bucket after testing *uaddr, that
	 * would open a race condition where we could block indefinitely with
	 * cond(var) false, which would violate the guarantee.
	 *
	 * On the other hand, we insert q and release the hash-bucket only
	 * after testing *uaddr.  This guarantees that futex_wait() will NOT
	 * absorb a wakeup if *uaddr does not match the desired values
	 * while the syscall executes.
	 */</span>
retry<span class="token operator">:</span>
	<span class="token comment">// 通过uaddr来计算并初始化futex_q的key</span>
	ret <span class="token operator">=</span> <span class="token function">get_futex_key</span><span class="token punctuation">(</span>uaddr<span class="token punctuation">,</span> flags <span class="token operator">&amp;</span> FLAGS_SHARED<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token operator">-></span>key<span class="token punctuation">,</span> VERIFY_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>

retry_private<span class="token operator">:</span>
	<span class="token comment">// 对futex_q将要存放的等待队列加锁，并返回这个等待队列的指针</span>
	<span class="token operator">*</span>hb <span class="token operator">=</span> <span class="token function">queue_lock</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将在用户空间中uaddr地址的值拷贝到内核空间中的uval地址位置</span>
	ret <span class="token operator">=</span> <span class="token function">get_futex_value_locked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uval<span class="token punctuation">,</span> uaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 拷贝失败，释放队列锁</span>
		<span class="token function">queue_unlock</span><span class="token punctuation">(</span><span class="token operator">*</span>hb<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 再次从用户空间中将uaddr地址的值拷贝到uval</span>
		ret <span class="token operator">=</span> <span class="token function">get_user</span><span class="token punctuation">(</span>uval<span class="token punctuation">,</span> uaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
			<span class="token comment">// 拷贝失败，跳转到out处</span>
			<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
		<span class="token comment">// 拷贝成功,重试</span>
		<span class="token keyword">goto</span> retry_private<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>uval <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 如果值不相等了，说明已经有进程(此处其实是线程)修改了锁变量地址中的值</span>
		<span class="token function">queue_unlock</span><span class="token punctuation">(</span><span class="token operator">*</span>hb<span class="token punctuation">)</span><span class="token punctuation">;</span>
		ret <span class="token operator">=</span> <span class="token operator">-</span>EWOULDBLOCK<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

out<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
		<span class="token comment">// 处理多进程共享锁地址的逻辑，内部对私有进程锁是不会处理的</span>
		<span class="token function">put_futex_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">get_futex_key</span><span class="token punctuation">(</span>u32 __user <span class="token operator">*</span>uaddr<span class="token punctuation">,</span> <span class="token keyword">int</span> fshared<span class="token punctuation">,</span> <span class="token keyword">union</span> futex_key <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">int</span> rw<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>uaddr<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm <span class="token operator">=</span> current<span class="token operator">-></span>mm<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token operator">*</span>page_head<span class="token punctuation">;</span>
	<span class="token keyword">int</span> err<span class="token punctuation">,</span> ro <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">/*
	 * The futex address must be "naturally" aligned.
	 */</span>
	<span class="token comment">// 计算 uaddr 在内存页内偏移量</span>
	key<span class="token operator">-></span>both<span class="token punctuation">.</span>offset <span class="token operator">=</span> address <span class="token operator">%</span> PAGE_SIZE<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token punctuation">(</span>address <span class="token operator">%</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
	<span class="token comment">// 计算得到 uaddr 所在内存页的首地址</span>
	address <span class="token operator">-=</span> key<span class="token operator">-></span>both<span class="token punctuation">.</span>offset<span class="token punctuation">;</span>
	<span class="token comment">// 判断是否可以访问</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> uaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>

	<span class="token comment">/*
	 * PROCESS_PRIVATE futexes are fast.
	 * As the mm cannot disappear under us and the 'key' only needs
	 * virtual address, we dont even have to find the underlying vma.
	 * Note : We do have to check 'uaddr' is a valid user address,
	 *        but access_ok() should be faster than find_vma()
	 */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fshared<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 处理私有进程锁，通常是走这个逻辑</span>
		key<span class="token operator">-></span>private<span class="token punctuation">.</span>mm <span class="token operator">=</span> mm<span class="token punctuation">;</span> <span class="token comment">// 内存结构对象</span>
		key<span class="token operator">-></span>private<span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span> <span class="token comment">// 地址</span>
		<span class="token comment">// 针对私有进程锁就是增加内存屏障的作用,保证上面指令以及在该函数之后的指令顺序性</span>
		<span class="token function">get_futex_key_refs</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* implies MB (B) */</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 多进程共享锁逻辑 省略</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* The key must be already stored in q->key. */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span><span class="token function">queue_lock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">futex_q</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
	<span class="token function">__acquires</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span>hb<span class="token punctuation">;</span>
	<span class="token comment">// 获取futex_q所在的链表 futex_q是在一个hash数组中的链表上</span>
	hb <span class="token operator">=</span> <span class="token function">hash_futex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/*
	 * Increment the counter before taking the lock so that
	 * a potential waker won't miss a to-be-slept task that is
	 * waiting for the spinlock. This is safe as all queue_lock()
	 * users end up calling queue_me(). Similarly, for housekeeping,
	 * decrement the counter at queue_unlock() when some error has
	 * occurred and we don't end up adding the task to the list.
	 */</span>
	<span class="token comment">// 原子性的增加一个等待进程的数量</span>
	<span class="token function">hb_waiters_inc</span><span class="token punctuation">(</span>hb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将futex_q的锁指针指向它要存放的等待队列的锁，因为接下来在该队列上做操作,要保证线程安全</span>
	q<span class="token operator">-></span>lock_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">;</span>
	<span class="token comment">// 给等待队列加自旋锁</span>
	<span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* implies MB (A) */</span>
	<span class="token keyword">return</span> hb<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">queue_unlock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span>hb<span class="token punctuation">)</span>
	<span class="token function">__releases</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">hb_waiters_dec</span><span class="token punctuation">(</span>hb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_futex_value_locked</span><span class="token punctuation">(</span>u32 <span class="token operator">*</span>dest<span class="token punctuation">,</span> u32 __user <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">;</span>

	<span class="token function">pagefault_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将在用户空间中form地址的值拷贝到内核空间中的dest地址位置</span>
	ret <span class="token operator">=</span> <span class="token function">__copy_from_user_inatomic</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">pagefault_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 拷贝成功返回0</span>
	<span class="token keyword">return</span> ret <span class="token operator">?</span> <span class="token operator">-</span>EFAULT <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>futex_wait_setup</code>主要就做三件事</p>
<ul>
<li>调用<code>get_futex_key</code>函数，内部会根据<code>uaddr</code>地址计算<code>futex_q</code>元素的<code>key</code>，并且判断<code>uaddr</code>地址是否可以被访问，然后初始化<code>futex_q</code>的内存结构<code>mm</code>和锁地址<code>address</code>这两个字段</li>
<li>调用<code>queue_lock(q)</code>函数，对<code>futex_q</code>将要插入的等待队列加锁，并且返回等待队列的地址</li>
<li>获取<code>uaddr</code>的值并与<code>val</code>判断，如果不相等说明被其他进程更改过了，那么不应该继续执行返回非0，相等则返回0</li>
</ul>
<h3 id="futex_wait_queue_me"><a class="markdownIt-Anchor" href="#futex_wait_queue_me"></a> futex_wait_queue_me</h3>
<p>该函数是<code>futex_wait</code>的关键，完成了阻塞当前进程并重新调度进程执行的功能</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">futex_wait_queue_me</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span>hb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">futex_q</span> <span class="token operator">*</span>q<span class="token punctuation">,</span>
				<span class="token keyword">struct</span> <span class="token class-name">hrtimer_sleeper</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">/*
	 * The task state is guaranteed to be set before another task can
	 * wake it. set_current_state() is implemented using set_mb() and
	 * queue_me() calls spin_unlock() upon completion, both serializing
	 * access to the hash list and forcing another memory barrier.
	 */</span>
	<span class="token comment">// 设置进程状态为TASK_INTERRUPTIBLE,注意：在liunx内核中只会调度状态为TASK_RUNNING的进程，所以该进程不会被调度了</span>
	<span class="token function">set_current_state</span><span class="token punctuation">(</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将 futex_q 插入到等待队列中，并且会释放等待队列的锁</span>
	<span class="token function">queue_me</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> hb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/* Arm the timer */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 设置了超时，那么启动定时器来调度唤醒该进程</span>
		<span class="token function">hrtimer_start_expires</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timeout<span class="token operator">-></span>timer<span class="token punctuation">,</span> HRTIMER_MODE_ABS<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hrtimer_active</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timeout<span class="token operator">-></span>timer<span class="token punctuation">)</span><span class="token punctuation">)</span>
			timeout<span class="token operator">-></span>task <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">/*
	 * If we have been removed from the hash list, then another task
	 * has tried to wake us, and we can skip the call to schedule().
	 */</span>
	 <span class="token comment">// 判断当前futex_q的节点是否还在等待队列中,如果不在，说明已经有进程唤醒,那么就不进行进程的调度,避免上下文切换</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">plist_node_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">/*
		 * If the timer has already expired, current will already be
		 * flagged for rescheduling. Only call schedule if there
		 * is no timeout, or if it has yet to expire.
		 */</span>
		<span class="token comment">// 没有设置定时唤醒或者已经定时器没有超时</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">||</span> timeout<span class="token operator">-></span>task<span class="token punctuation">)</span>
			<span class="token comment">// 重新调度进程</span>
			<span class="token function">freezable_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 被唤醒了(被其他进程唤醒或者是定时器唤醒),设置进程的状态为TASK_RUNNING(这里是防御性编程，无论上面哪种唤醒方式，在调度该线程时都会将状态设置为TASK_RUNNING)</span>
	<span class="token comment">// 可以查看 core.c ttwu_do_wakeup函数实现</span>
	<span class="token function">__set_current_state</span><span class="token punctuation">(</span>TASK_RUNNING<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>queue_me：将futex_q所在节点插入到等待队列中</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">queue_me</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">futex_q</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span>hb<span class="token punctuation">)</span>
	<span class="token function">__releases</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> prio<span class="token punctuation">;</span>

	<span class="token comment">/*
	 * The priority used to register this element is
	 * - either the real thread-priority for the real-time threads
	 * (i.e. threads with a priority lower than MAX_RT_PRIO)
	 * - or MAX_RT_PRIO for non-RT threads.
	 * Thus, all RT-threads are woken first in priority order, and
	 * the others are woken last, in FIFO order.
	 */</span>
	prio <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>current<span class="token operator">-></span>normal_prio<span class="token punctuation">,</span> MAX_RT_PRIO<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">plist_node_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-></span>list<span class="token punctuation">,</span> prio<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将futex_q所在的节点插入到等待队列中 注意: 虽然取名是 list 但其实是个节点类型</span>
	<span class="token function">plist_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-></span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hb<span class="token operator">-></span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
	q<span class="token operator">-></span>task <span class="token operator">=</span> current<span class="token punctuation">;</span>
	<span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// plist_add方法</span>
<span class="token keyword">void</span> <span class="token function">plist_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">plist_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">plist_head</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>futex_wait_queue_me</code>函数总结</p>
<ol>
<li>设置当前进程的状态为<code>TASK_INTERRUPTIBLE</code>,处于该状态的进程不会被内核调度</li>
<li>将代表当前进程的<code>futex_q</code>插入到等待队列中，并释放等待队列的锁</li>
<li>判断<code>futex_q</code>是否还在等待队列，因为已经释放了等待队列的锁了，可能在释放之后就有进程马上调用了<code>futex_wake</code>唤醒了该进程，那么就不需要重新调度，直接返回即可，如果还在，那么就调用<code>schedule</code>来重新调度进程
<ul>
<li>注意：<code>freezable_schedule</code>内部会调用<code>schedule</code>，该函数才是真正实现了调度进程的功能</li>
</ul>
</li>
</ol>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p><code>futex_wait</code>的完整流程</p>
<ol>
<li>如果设置了超时唤醒，那么会为其设置一个定时任务，当达到指定的时间但仍未取消该任务，就由定时任务来唤醒当前进程</li>
<li>调用<code>futex_wait_setup</code>来完成将代表当前进程的<code>futex_q</code>插入到等待队列之前的准备工作，在该函数内部会根据<code>uaddr</code>的地址来计算并且初始化<code>futex_q</code>的<code>key</code>属性，然后对<code>futex_q</code>要插入的等待队列加锁，然后判断<code>uaddr</code>是否可以访问，如果可以便获取<code>uaddr</code>的值并且与<code>val</code>比较，如果相等，说明没有被其他进程更改过，那么可以进行阻塞操作返回0，如果不相等那么释放等待队列锁然后返回非0</li>
<li>根据<code>futex_wait_setup</code>的返回值来判断，如果是非0，那么直接退出返回，如果是0，那么继续向下执行，调用<code>futex_wait_queue_me</code>来完成阻塞当前进程并重新调度进程的操作</li>
<li>在<code>futex_wait_queue_me</code>中，首先将当前进程状态设置为<code>TASK_INTERRUPTIBLE</code>，将代表当前进程的<code>futex_q</code>插入到等待队列中，并且释放锁，在真正通过<code>schedule</code>函数重新调度进程之前会做一次检查，判断<code>futex_q</code>是否还在等待队列中，如果不在说明就在释放锁之后立马就有进程唤醒了当前进程，那么不需要通过<code>schedule</code>函数重新调度了，如果还在，那么就通过<code>schedule</code>函数来重新调度进程</li>
</ol>
<h2 id="futex_wake-源码解析"><a class="markdownIt-Anchor" href="#futex_wake-源码解析"></a> futex_wake 源码解析</h2>
<p><code>futex_wake</code> 源码相对<code>futex_wait</code>来说要简单许多，接下来让我们探究一下<code>futex_wake</code>是如何唤醒在等待队列上的进程的</p>
<h3 id="futex_wake-源码时序图"><a class="markdownIt-Anchor" href="#futex_wake-源码时序图"></a> futex_wake 源码时序图</h3>
<pre class="mermaid">sequenceDiagram
	futex_wake->>get_futex_key: 通过uaddr计算获取futex_key
	futex_wake->>hash_futex: 通过futex_key定位找到等待队列的头节点
	futex_wake->>hb_waiters_pending: 判断等待队列上的waiter属性是否为0，从而来决定是否继续执行
	Note over futex_wake,hb_waiters_pending: 如果为0说明没有进程在等待,直接返回<br/>如果不为0说明存在需要唤醒的进程,那么对等待队列加锁,然后通过等待队列头节点进行遍历
	futex_wake-->>wake_futex: 唤醒指定进程
	rect rgb(66, 184, 131)
	wake_futex-->>__unqueue_futex: 将代表当前进程的futex_q从等待队列中移除,并释放队列锁
	wake_futex-->>wake_up_state: 将指定进程设置为可调度执行的状态,然后将其插入到相应的调度队列中,等待内核调度
	end</pre>
<h3 id="futex_wake"><a class="markdownIt-Anchor" href="#futex_wake"></a> futex_wake</h3>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">futex_wake</span><span class="token punctuation">(</span>u32 __user <span class="token operator">*</span>uaddr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> nr_wake<span class="token punctuation">,</span> u32 bitset<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span>hb<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">futex_q</span> <span class="token operator">*</span>this<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
	<span class="token keyword">union</span> futex_key key <span class="token operator">=</span> FUTEX_KEY_INIT<span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bitset<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
	<span class="token comment">// 通过 uaddr 计算futex_q 的 key</span>
	ret <span class="token operator">=</span> <span class="token function">get_futex_key</span><span class="token punctuation">(</span>uaddr<span class="token punctuation">,</span> flags <span class="token operator">&amp;</span> FLAGS_SHARED<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">,</span> VERIFY_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	<span class="token comment">// 通过key找到futex_q所在的等待队列 </span>
	hb <span class="token operator">=</span> <span class="token function">hash_futex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/* Make sure we really have tasks to wakeup */</span>
	<span class="token comment">// 判断等待队列的waiters属性是否大于0，决定是否执行接下来的唤醒动作，如果等于0，说明没有等待队列为空，直接返回</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hb_waiters_pending</span><span class="token punctuation">(</span>hb<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> out_put_key<span class="token punctuation">;</span>
	<span class="token comment">// 接下来就要对等待队列操作了，对等待队列加锁</span>
	<span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 遍历等待队列列表</span>
	<span class="token function">plist_for_each_entry_safe</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> next<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hb<span class="token operator">-></span>chain<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 比较等待队列元素上的key是否与计算得到的key相等</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match_futex</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>this<span class="token operator">-></span>key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-></span>pi_state <span class="token operator">||</span> this<span class="token operator">-></span>rt_waiter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				ret <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token comment">/* Check if one of the bits is set in both bitsets */</span>
			<span class="token comment">// 匹配成功,判断位图上的bit位是否发生变化,如果没有变化,则不会唤醒,通常 bitset 是一个32位全为1的的数,所以都会直接走唤醒的流程</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>this<span class="token operator">-></span>bitset <span class="token operator">&amp;</span> bitset<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token comment">// 唤醒当前futex_q元素上关联的进程</span>
			<span class="token function">wake_futex</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 唤醒指定数量的进程后就退出遍历</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>ret <span class="token operator">>=</span> nr_wake<span class="token punctuation">)</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 释放锁</span>
	<span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hb<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
out_put_key<span class="token operator">:</span>
	<span class="token comment">// 销毁key</span>
	<span class="token function">put_futex_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token operator">:</span>
	<span class="token comment">// 返回唤醒的进程数量</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>futex_wake 内部完成如下功能</p>
<ol>
<li>通过<code>uaddr</code>来计算并获取<code>futex_q</code>的key，通过<code>key</code>从等待队列hash表中获取对应的等待队列</li>
<li>对等待队列加锁，循环遍历等待队列列表中的元素，判断元素上的<code>key</code>是否与<code>futex_q</code>的<code>key</code>匹配，如果匹配，调用<code>wake_futex</code>执行唤醒操作，唤醒等待队列上指定数量阻塞等待的进程后就会退出遍历</li>
<li>释放等待队列锁，返回唤醒的进程数量</li>
</ol>
<h4 id="wake_futex"><a class="markdownIt-Anchor" href="#wake_futex"></a> wake_futex</h4>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">wake_futex</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">futex_q</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// futex_q关联的进程结构体 task_struct</span>
	<span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p <span class="token operator">=</span> q<span class="token operator">-></span>task<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WARN</span><span class="token punctuation">(</span>q<span class="token operator">-></span>pi_state <span class="token operator">||</span> q<span class="token operator">-></span>rt_waiter<span class="token punctuation">,</span> <span class="token string">"refusing to wake PI futex\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>

	<span class="token comment">/*
	 * We set q->lock_ptr = NULL _before_ we wake up the task. If
	 * a non-futex wake up happens on another CPU then the task
	 * might exit and p would dereference a non-existing task
	 * struct. Prevent this by holding a reference on p across the
	 * wake up.
	 */</span>
	<span class="token comment">// 通过调用 get_task_struct(p) 增加引用计数，即使任务在唤醒过程中被其他事件触发退出，由于引用计数不为 0，`struct task_struct` 结构体也不会被立即释放</span>
	<span class="token function">get_task_struct</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将 futex_q 元素从等待队列中移除</span>
	<span class="token function">__unqueue_futex</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/*
	 * The waiting task can free the futex_q as soon as
	 * q->lock_ptr = NULL is written, without taking any locks. A
	 * memory barrier is required here to prevent the following
	 * store to lock_ptr from getting ahead of the plist_del.
	 */</span>
	<span class="token comment">// 内存屏障，保证指令顺序性</span>
	<span class="token function">smp_wmb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 释放对等待队列的锁引用</span>
	q<span class="token operator">-></span>lock_ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">// 执行唤醒操作 底层会将进程p的状态设置为TASK_RUNNING,然后将它放入到相应的调度队列中，等待cpu调度</span>
	<span class="token comment">// TASK_NORMAL 是一个状态掩码,在唤醒时会根据任务p的状态来做与操作,判断当前状态是否支持唤醒</span>
	<span class="token comment">// TASK_NORMAL = TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE</span>
	<span class="token function">wake_up_state</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> TASK_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将任务p的引用计数-1</span>
	<span class="token function">put_task_struct</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__unqueue_futex</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">futex_q</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span> <span class="token operator">*</span>hb<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WARN_ON_SMP</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token operator">-></span>lock_ptr <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">spin_is_locked</span><span class="token punctuation">(</span>q<span class="token operator">-></span>lock_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>
	    <span class="token operator">||</span> <span class="token function">WARN_ON</span><span class="token punctuation">(</span><span class="token function">plist_node_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-></span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token comment">// 通过 container_of 找到 futex_q 所在的等待队列</span>
	hb <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>q<span class="token operator">-></span>lock_ptr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">futex_hash_bucket</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将 futex_q 从等待队列上移除</span>
	<span class="token function">plist_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token operator">-></span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hb<span class="token operator">-></span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将等待队列上的waiters属性自减1</span>
	
	<span class="token function">hb_waiters_dec</span><span class="token punctuation">(</span>hb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>增加<code>futex_q</code>所关联的任务结构体对象引用计数，将代表当前进程的<code>futex_q</code>元素从等待队列中移除并对等待队列的<code>waiters</code>自减1，然后释放<code>futex_q</code>对等待队列锁的引用</li>
<li>调用<code>wake_up_state</code>函数来唤醒指定的进程，对应之前的任务的引用计数+1，此时需要调用<code>put_task_strcut</code>来将任务的引用计数-1</li>
</ol>
<p><code>wake_up_state</code>细节</p>
<ul>
<li><code>wake_up_state</code> 是定义在 <code>kernel/sched/core.c</code>中的函数，在内部会调用<code>try_to_wake_up</code>函数来唤醒指定进程，值得一提的是：在<code>futex_wait</code>中定义的定时任务也是通过该函数来完成唤醒进程的功能的，该函数最底层会调用<code>ttwu_do_wakeup</code>将进程标记为<code>TASK_RUNNING</code>可运行状态，然后会将进程插入到相应的调度队列中，等待内核调度</li>
</ul>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>liunx</category>
      </categories>
  </entry>
  <entry>
    <title>Liunx 任务调度</title>
    <url>/posts/bcc098b4.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>源码分析</category>
        <category>liunx</category>
      </categories>
  </entry>
</search>
